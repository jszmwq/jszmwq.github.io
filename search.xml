<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2021长安杯做题总结</title>
    <url>/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>鼠鼠参加了长安杯，没想到连第七题的密码都没找出来，属实是太菜，哭哭了。硬生生的干坐了三个小时，最可笑的是做对的题竟然还没有蒙对的题多，想要技术过关，还需要继续学习！（WP暂时还不想写，最近的事比较多，期中考试，密码学习，美亚杯，各种各样的事情都需要去花时间去做，奈何时间不够又想要偷懒摸鱼，至少先一步一步来吧:（    ）</p>
<h1 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h1><h2 id="检材一"><a href="#检材一" class="headerlink" title="检材一"></a>检材一</h2><blockquote>
<p>2021年4月25日，上午8点左右，警方接到被害人金某报案，声称自己被敲诈数万元；经询问，昨日金某被嫌疑人诱导裸聊， 下载了某“裸聊”软件，导致自己的通讯录和裸聊视频被嫌疑人获取，对其进行敲诈，最终金某不堪重负，选择了报警；警 方从金某提供的本人手机中，定向采集到了该“裸聊”软件的安装包–zhibo.apk（检材一），请各位回答下列问题：（题目 中需要通过分析出来的答案对检材二三四五解压，解压密码为IP的情况，需要在密码后增加-CAB2021，例： 192.168.100.100-CAB2021）</p>
</blockquote>
<p><strong>1、请计算检材一Apk的SHA256值</strong></p>
<p><strong>答案：3fece1e93be4f422c8446b77b6863eb6a39f19d8fa71ff0250aac10f8bdde73a</strong></p>
<p><strong>2 、该APK的应用包名为</strong></p>
<p><strong>答案：plus.H5B8E45D3</strong></p>
<p>我们使用雷电APP智能分析软件，分析检材中的APK文件</p>
<p><strong><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/image-20211027220822606.png" alt="image-20211027220822606" style="zoom: 80%;"></strong></p>
<p><strong>3 、该APK程序在封装服务商的应用唯一标识（APPID）为</strong></p>
<p><strong>答案：H5B8E45D3</strong></p>
<p><strong><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/image-20211027221132503.png" alt="image-20211027221132503"></strong></p>
<p><strong>4 、该APK具备下列哪些危险权限(多选题)：</strong></p>
<p><strong>A.读取短信     B.读取通讯录     C.读取精确位置     D.修改通讯录     E.修改短信</strong></p>
<p><strong>答案：ABCDE</strong></p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/image-20211027221312992.png" alt="image-20211027221312992"></p>
<p><strong>5、该APK发送回后台服务器的数据包含以下哪些内容（多选题）：</strong>     </p>
<p><strong>A.手机通讯录    B.手机应用列表    C.手机号码    D.验证码    E.GPS定位信息</strong></p>
<p><strong>答案：ACDE</strong></p>
<p><strong>6、该APK程序回传通讯录时，使用的http请求方式为</strong></p>
<p><strong>答案：POST</strong></p>
<p><strong>7、该APK程序的回传地址域名为</strong></p>
<p><strong>答案：<a href="http://www.honglian7001.com/">www.honglian7001.com</a></strong></p>
<p><strong>8、该APK程序代码中配置的变量apiserver的值为</strong></p>
<p><strong>答案：<a href="http://www.honglian7001.com/api/uploads">http://www.honglian7001.com/api/uploads</a></strong></p>
<p><strong>9、分析该APK，发现该程序还具备获取短信回传到后台的功能，短信上传服务器接口地址为</strong></p>
<p><strong>答案：<a href="http://www.honglian7001.com/api/uploads/apisms">http://www.honglian7001.com/api/uploads/apisms</a></strong></p>
<h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/image-20211027222042303.png" alt="image-20211027222042303"></p>
<p>在雷电智能分析APP里网络数据包一项，<strong>选中代理模式</strong>，对数据包进行分析</p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/image-20211027222515027.png" alt="image-20211027222515027"></p>
<p>可得知此处获取了手机的通讯录、手机号码、验证码，以及手机型号</p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/image-20211027222657302.png" alt="image-20211027222657302"></p>
<p>另一处调用了百度的API获取了GPS定位信息</p>
<h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/image-20211027223448396.png" alt="image-20211027223448396"></p>
<p>（本人技术不太行，只能得知回传通讯录时曾与<a href="http://www.honglian7001.com有过联系)/">www.honglian7001.com有过联系）</a></p>
<p>第6题和第7题都可以用抓包的方式解决，此处采用Fiddler，方法可参考：<a href="https://zhuanlan.zhihu.com/p/30355483">https://zhuanlan.zhihu.com/p/30355483</a></p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/1IeRLs9uPSly8t2.png" alt="1IeRLs9uPSly8t2"></p>
<h3 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h3><p>我们可以通过源码分析获取答案</p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/image-20211027224556210.png" alt="image-20211027224556210"></p>
<p>通过SOJSON解密可得</p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/image-20211027224817003.png" alt="image-20211027224817003"></p>
<p>找到回传域名和变量apiserver的值</p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/image-20211027225623914.png" alt="image-20211027225623914"></p>
<p>回传短信，可以知道短信回传服务器接口为 apiserver + ‘apisms’</p>
<p><strong>10、敬分析，发现该APK在运行过程中会在手机中产生一个数据库文件，该文件的文件名为</strong></p>
<p><strong>答案：test.db</strong></p>
<p><strong>11、敬分析，发现该APK在运行过程中会在手机中产生一个数据库文件，该数据库的初始密码为</strong></p>
<p><strong>答案：c74d97b01eae257e44aa9d5bade97baf</strong></p>
<p>雷电APP智能分析内置脚本数据库分析，直接调用即可</p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/image-20211027230029755.png" alt="image-20211027230029755"></p>
<h2 id="检材二"><a href="#检材二" class="headerlink" title="检材二"></a>检材二</h2><blockquote>
<p>经过掌握的APK程序后台服务器回连地址，警方成功调取该服务器的镜像，请使用第7题的答案对检材二进行解压进行分析，</p>
</blockquote>
<p><strong>12、检材二的原始硬盘的SHA256值为：</strong></p>
<p>答案：E6873068B83AF9988D297C6916329CEC9D8BCB672C6A894D393E68764391C589  </p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/image-20211030140730819.png" alt="image-20211030140730819"></p>
<p><strong>13、查询涉案于案发时间段内登陆服务器的IP地址为</strong></p>
<p><strong>答案：192.168.110.203</strong></p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/image-20211030140841921.png" alt="image-20211030140841921"></p>
<p><strong>14、请对检材二进行分析，并回答该服务器在集群中承担的主要作用是（）</strong></p>
<p><strong>答案：<em>负载均衡服务器</em></strong>（能理解作用，但确实说不出来这个术语）</p>
<blockquote>
<p>什么是负载均衡？</p>
<p>负载均衡，英文名称为Load Balance，其含义就是指将负载（工作任务）进行平衡、分摊到多个操作单元上进行运行，例如FTP服务器、Web服务器、企业核心应用服务器和其它主要任务服务器等，从而协同完成工作任务。</p>
</blockquote>
<p><strong>15、上一题中，提到的主要功能对应的服务监听的端口为：</strong></p>
<p><strong>答案：80</strong></p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/image-20211030152024317.png" alt="image-20211030152024317"></p>
<p><strong>16、上一题中，提到的服务所使用的启动命令为：</strong></p>
<p><strong>答案：node app.js</strong></p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/image-20211030151740566.png" alt="image-20211030151740566"></p>
<p><strong>17、经分析，该服务对于请求来源IP的处理依据是：根据请求源IP地址的第（）位进行判断</strong></p>
<p><strong>答案：3</strong></p>
<p><strong>18、经分析，当判断条件小于50时，服务器会将该请求转发到IP为（）的服务器上</strong></p>
<p><strong>答案：192.168.110.111</strong></p>
<p><strong>19、请分析，该服务器转发的目标服务器一共有几台</strong></p>
<p><strong>答案：3</strong></p>
<p>在检材2的仿真中查看history，发现嫌疑人曾经对ADProxy.js这个文件进行编辑，由于含有proxy（代理），故对其进行查看</p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/image-20211030150948487.png" alt="image-20211030150948487"></p>
<p>这里代码的意思就是将例如192.168.1.2的IP地址按 ” . “ 进行分割存取成数组，选择其中的第三个数，即例子里的 1 进行判断，根据判断得出的结果分别发送到三台服务器中的其中一台。</p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/image-20211030151430942.png" alt="image-20211030151430942"></p>
<p><strong>20、请分析，受害者通讯录被获取时，其设备的IP地址为</strong></p>
<p><strong>答案：192.168.110.252</strong></p>
<p>第20题和第21题主要考察对于日志的审计，在 <code>/opt/honglianjingsai/chronusNode/logs</code> 这个路径下保存了了服务器的日志，根据对于案发时间的判断，我们可以确定是在4.24这一天发生的（这里具体案发时间可以等后续查看手机，在手机取证时一些聊天软件的聊天记录中会有很准确的时间信息）</p>
<p>在这个日志文件里出现次数最多的几个ip地址分别是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.110.203</span><br><span class="line">192.168.110.252</span><br><span class="line">192.168.110.113</span><br></pre></td></tr></table></figure>

<p>其实通过排除法也能很快得到本题的答案，203是登录服务器的ip地址，113是请求转发的目标地址，那252就是本题的答案</p>
<p>如果不想通过排除法来做出此题，那更准确的时间判断就可以参考手机的聊天记录，再和日志中的时间相对照，也可以得到答案</p>
<p><strong>21、请分析，受害者的通讯录被窃取之后，经由该服务器转发到了IP为（）的服务器上</strong></p>
<p><strong>答案：192.168.110.113</strong></p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/image-20211030142330688.png" alt="image-20211030142330688"></p>
<h2 id="检材三"><a href="#检材三" class="headerlink" title="检材三"></a>检材三</h2><p><strong>22、检材三的原始硬盘的SHA256值为：</strong></p>
<p><strong>答案：205C1120874CE0E24ABFB3BB1525ACF330E05111E4AD1D323F3DEE59265306BF</strong>  </p>
<p><strong>23、请分析第21题中，所指的服务器的开机密码为：</strong></p>
<p><strong>答案：honglian7001</strong></p>
<p>这道题最好还是用火眼证据分析大师来做，因为美亚对处理加密的检材方面比较吃力（或者说几乎没用）</p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/image-20211030190716242.png" alt="image-20211030190716242"></p>
<p>在这里直接通过web3看到开机密码不太方便（乱码太多），可以先放一放，考虑通过检材的PC电脑通过XSHELL连接，会获得相关信息</p>
<p>金先生被骗的服务器的IP地址是192.168.110.113，从下图可以看到密码为honglian7001</p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/image-20211030191702831.png" alt="image-20211030191702831"></p>
<p><strong>24、嫌疑人架设网站使用了宝塔面板，请问面板的登陆用户名为：</strong></p>
<p><strong>答案：</strong></p>
<p>下面抄自galaxy的题解，<a href="http://www.ga1axy.top/index.php/archives/64/">长安杯2021赛题复现详解 - Ga1@xy’s Wor1d (ga1axy.top)</a>，访问密码 <code>CAB-2021-123!@#</code></p>
<p>24题开始有几道题是涉及到宝塔面板相关知识和一些宝塔源码分析的题，在web3仿真起来后其实可以直接在虚拟机里看，但是由于他本身汉字编码的一些关系，会导致大量的乱码，看起来也很不舒服，所以我采用xshell连接的方式来进行</p>
<p>我们先讲一下如何用xshell连接到web3服务器的虚拟机，由于本身web3的网络配置是静态配置，并且题目架设的ip地址与实际我们做题环境不符，所以我们需要先修改web3的网络配置（web3我已经配好了，所以下面我拿web1演示）</p>
<p>首先我们需要知道服务器的网卡配置文件在哪，也就是我们part2一开始提到的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure>

<p>在VMware的虚拟网络编辑器中开启DHCP，</p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/image-20211030193911329.png" alt="image-20211030193911329"></p>
<p>我们先修改设置使得我们主机分配给虚拟机的C段符合题目背景，然后关闭DHCP</p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/dXbUBf6T9LKsYFW.png" alt="dXbUBf6T9LKsYFW"></p>
<p>在虚拟机中执行 <code>ifconfig</code> 命令，我们可以发现默认网卡名称为 ens-160，但我们实际在 network-script 目录下并不能发现这个网卡配置文件，所以我们需要修改配置文件（如果你的网卡配置不是160，那就根据自己的实际情况进行修改）</p>
<p>首先查看当前网卡的UUID：<code>uuidgen ens-160</code></p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/RLv7kVFSdamxNjp.png" alt="RLv7kVFSdamxNjp"></p>
<p>先记住这个uuid，然后我们修改原配置文件的名称：<code>mv ifcfg-ens33 ifcfg-ens160</code></p>
<p>改好名后对其中的配置进行编辑：<code>vi ./ifcfg-ens160</code></p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/5fZeLKqCxUNcB6D.png" alt="5fZeLKqCxUNcB6D"></p>
<p>上图中框起来的部分是需要我们注意的，NAME 和 DEVICE 两个参数改成 <code>ens160</code>，UUID 改成我们刚刚获取的那个，IPADDR 不要改</p>
<p>改好后保存退出，重启网络服务：<code>service network restart</code></p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/9cZ84TWjCrgz2bd.png" alt="9cZ84TWjCrgz2bd"></p>
<p>这种情况下就已经配置好了，接下来就可以使用xshell连接我们的虚拟机了（关于xshell和xftp，一个用于远程指令，一个可以跟主机之间传输文件，端口就默认设置22就可以，下载的话有个人免费版）</p>
<p>回到题目，本题问宝塔面板的登录用户名，使用 <code>bt default</code> 命令即可查看</p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/q18QOcM36hopTfk.png" alt="q18QOcM36hopTfk"></p>
<p>出现下面的这张图片，这个时候就已经连接成功了，下面我来说说我配置的时候与大佬的题解不一样的地方</p>
<p>第一个地方就是我在web3的时候发现默认网卡已经是enS33，就不需要像上面那样费力配置ENS160了，不过在配置完DHCP后，最好还是要在WEB3虚拟机上运行 <code>service network restart</code>，如果遇到连接不上的情况，建议重启web服务器</p>
<p>第二个地方就是在个人电脑（不是PC虚拟机，我一开始理解错了）上运行Xshell时，要求输入虚拟机登陆密码，由于弘联火眼仿真已经将登陆密码修改成123456，所以输入honglian7001是无法登陆成功的（大佬请无视）</p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/image-20211030193629364.png" alt="image-20211030193629364"></p>
<p><strong>25、请分析用于重置宝塔面板密码的函数名为</strong></p>
<p><strong>答案：set_panel_pwd</strong></p>
<p>我们利用xtfp连接web服务器，在/www/server/panel目录下发现tools.py文件，对其进行分析</p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/image-20211030231224689.png" alt="image-20211030231224689"></p>
<p>这里是宝塔面板，可以看到当输入为5时修改宝塔面板密码</p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/image-20211030231341859.png" alt="image-20211030231341859"></p>
<p><strong>26、请分析宝塔面板登陆密码的加密方式所使用的哈希算法为</strong></p>
<p><strong>答案:md5</strong></p>
<p>追踪到修改密码的函数，很容易得到答案</p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/image-20211030231459852.png" alt="image-20211030231459852"></p>
<p><strong>27、请分析宝塔面板对于其默认用户的密码一共执行了几次上题中的哈希算法</strong></p>
<p><strong>答案：3</strong></p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/image-20211030231932977.png" alt="image-20211030231932977"></p>
<p>上图的MD5函数是public类中的，由于public是自我定义的，并且存放在panel下的class文件夹内，故对其进行查找</p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/image-20211030233028254.png" alt="image-20211030233028254"></p>
<p>在对passwd进行md5后放进password_salt函数又进行了两次md5,故总共进行了三次md5</p>
<p><strong>28、请分析当前宝塔面板密码加密过程中所使用的salt值为【区分大小写】</strong></p>
<p><strong>答案：v87ilhAVumZL</strong></p>
<p>根据db.py</p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/image-20211030233952229.png" alt="image-20211030233952229"></p>
<p>找到default.db文件，打开在user中发现salt一栏</p>
<p><strong>29、请分析该服务器，网站源代码所在的绝对路径为</strong></p>
<p><strong>答案：</strong></p>
<p><strong>30、请分析，网站所使用的数据库位于IP为（）的服务器上（请使用该IP解压检材4，并重构网 站）</strong></p>
<p><strong>答案：</strong></p>
<p><strong>31、请分析，数据库的登陆密码为【区分大小写】</strong></p>
<p><strong>答案：</strong></p>
<p><strong>32、请尝试重构该网站，并指出，该网站的后台管理界面的入口为【标准格式：/web】</strong></p>
<p><strong>答案：</strong></p>
<p><strong>33、已该涉案网站代码中对登录用户的密码做了加密处理。请找出加密算法中的salt值【区分大 小写】</strong></p>
<p><strong>答案：</strong></p>
<p><strong>34、请分析该网站的管理员用户的密码为：</strong></p>
<p><strong>答案：</strong></p>
<p><strong>35、在对后台账号的密码加密处理过程中，后台一共计算几次哈希值</strong></p>
<p><strong>答案：</strong></p>
<p><strong>36、请统计，后台中，一共有多少条设备记录</strong></p>
<p><strong>答案:</strong></p>
<p><strong>37、请通过后台确认，本案中受害者的手机号码为</strong></p>
<p><strong>答案：</strong></p>
<p><strong>38、请分析，本案中受害者的通讯录一共有多少条记录</strong></p>
<p><strong>答案：</strong></p>
<h2 id="检材四、五"><a href="#检材四、五" class="headerlink" title="检材四、五"></a>检材四、五</h2><blockquote>
<p>通过对检材二和三进行分析，警方通过IP落地，警方掌成功抓获犯罪嫌疑人，现将嫌疑人的PC机和手机进行了取证，分别制 作了镜像，请使用第13题的答案对检材四进行解密，并回答下列问题</p>
</blockquote>
<p><strong>39、请计算检材四-PC的原始硬盘的SHA256值</strong> </p>
<p><strong>答案：E9ABE6C8A51A633F809A3B9FE5CE80574AED133BC165B5E1B93109901BB94C2B</strong></p>
<p><strong>40、请分析，检材四-PC的Bitlocker加密分区的解密密钥为</strong></p>
<p><strong>答案：511126-518936-161612-135234-698357-082929-144705-622578</strong></p>
<p>在取证大师中进行分析，找到bitlocker的恢复密钥</p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/image-20211030183652829.png" alt="image-20211030183652829"></p>
<p><strong>41、请分析，检材四-PC的开机密码为</strong></p>
<p><strong>答案：12306</strong></p>
<p>将恢复密钥填进火眼仿真中，即可自动获取PC的开机密码</p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/image-20211030183916814.png" alt="image-20211030183916814"></p>
<p><strong>42、经分析发现，检材四-PC是嫌疑人用于管理服务器的设备，其主要通过哪个浏览器控制网站后</strong></p>
<p><strong>答案：Chrome</strong></p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/image-20211030184258733.png" alt="image-20211030184258733"></p>
<p><strong>43、请计算PC检材中用户目录下的zip文件的sha256值</strong></p>
<p><strong>答案：0DD2C00C8C6DBDEA123373F91A3234D2F07D958355F6CD7126E397E12E8ADBB3</strong></p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/image-20211030184929453.png" alt="image-20211030184929453"></p>
<p><strong>44、请分析检材四-phone，该手机的IMEI号为</strong></p>
<p><strong>答案：4b5a058f7d26</strong></p>
<p>欢乐的手机取证环节</p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/image-20211030181908728.png" alt="image-20211030181908728"></p>
<p><strong>45、请分析检材四-phone，嫌疑人和本案受害者是通过什么软件开始接触的【标准格式：支付宝</strong> </p>
<p><strong>答案：伊对</strong></p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/image-20211030182439204.png" alt="image-20211030182439204"></p>
<p><strong>46、请分析检材四-phone，受害者下载恶意APK安装包的地址为</strong></p>
<p><strong>答案：<a href="https://cowtransfer.com/s/a6b28b4818904c">https://cowtransfer.com/s/a6b28b4818904c</a></strong></p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/image-20211030182503483.png" alt="image-20211030182503483"></p>
<p><strong>47、请分析检材四-phone，受害者的微信内部ID号为、</strong></p>
<p><strong>答案：wxid_op8i06j0aano22</strong></p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/image-20211030182533255.png" alt="image-20211030182533255"></p>
<p><strong>48、请分析检材四-phone，嫌疑人用于敲诈本案受害者的QQ账号为</strong></p>
<p><strong>答案：1649840939</strong></p>
<p><img src="/2021/10/26/2021%E9%95%BF%E5%AE%89%E6%9D%AF%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/image-20211030182635997.png" alt="image-20211030182635997"></p>
<p><strong>49、请综合分析，嫌疑人用于管理敲诈对象的容器文件的SHA256值为</strong></p>
<p><strong>答案：</strong></p>
<p><strong>50、请综合分析嫌疑人检材，另外一受害者“郭先生”的手机号码为</strong></p>
<p><strong>答案：</strong></p>
<p><strong>51、通过嫌疑人检材，其中记录了几位受害者的信息</strong></p>
<p><strong>答案：</strong></p>
<p><strong>52、请使用第11题的密码解压“金先生转账.zip”文件，并对压缩包中的文件计算SHA256值</strong></p>
<p><strong>答案：</strong></p>
<p><strong>53、请综合分析，受害者一共被嫌疑人敲诈了多少钱（转账截图被隐藏在多个地方）</strong></p>
<p><strong>答案：</strong></p>
<h1 id="疑难杂症"><a href="#疑难杂症" class="headerlink" title="疑难杂症"></a>疑难杂症</h1><p><strong>14、请对检材二进行分析，并回答该服务器在集群中承担的主要作用是（）</strong></p>
<p><strong>23、请分析第21题中，所指的服务器的开机密码为：</strong></p>
]]></content>
      <tags>
        <tag>电子数据取证</tag>
      </tags>
  </entry>
  <entry>
    <title>Hackergame_EasyRSA</title>
    <url>/2021/10/28/Hackergame-EasyRSA/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本来以为这是一道很简单的题，但是我太菜了犯了几个十分低级的错误（快哭了），感谢dbt给我指点迷津，膜拜大佬。</p>
<h1 id="题目代码"><a href="#题目代码" class="headerlink" title="题目代码"></a>题目代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_p</span>():</span></span><br><span class="line">    x = <span class="number">11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391760451</span></span><br><span class="line">    y = <span class="number">11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391661439</span></span><br><span class="line">    value_p = sympy.nextprime((math.factorial(y)) % x)  <span class="comment"># Hint：这里直接计算会溢出，请你仔细观察 x 和 y 的特征</span></span><br><span class="line">    <span class="keyword">return</span> value_p</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_q</span>():</span></span><br><span class="line">    value = [getPrime(<span class="number">256</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">        value.append(sympy.nextprime(value[i - <span class="number">1</span>]))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;value[-1] = &quot;</span>, value[-<span class="number">1</span>])</span><br><span class="line">    <span class="comment"># value[-1] = 80096058210213458444437404275177554701604739094679033012396452382975889905967</span></span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        n = n * value[i]</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    value_q = <span class="built_in">pow</span>(q, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;value_q = &quot;</span>, value_q)</span><br><span class="line">    <span class="comment"># value_q = 5591130088089053683141520294620171646179623062803708281023766040254675625012293743465254007970358536660934858789388093688621793201658889399155357407224541324547522479617669812322262372851929223461622559971534394847970366311206823328200747893961649255426063204482192349202005330622561575868946656570678176047822163692259375233925446556338917358118222905050574458037965803154233167594946713038301249145097770337253930655681648299249481985768272321820718607757023350742647019762122572886601905212830744868048802864679734428398229280780215896045509020793530842541217790352661324630048261329493088812057300480085895399922301827190211956061083460036781018660201163819104150988531352228650991733072010425499238731811243310625701946882701082178190402011133439065106720309788819</span></span><br><span class="line">    <span class="keyword">return</span> sympy.nextprime(q)</span><br><span class="line"><span class="comment"># this destroyes the rsa cryptosystem</span></span><br><span class="line">p = get_p()</span><br><span class="line">q = get_q()</span><br><span class="line">m = <span class="built_in">int</span>.from_bytes(<span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>).read(), <span class="string">&quot;big&quot;</span>)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, p * q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = &quot;</span>, c)</span><br><span class="line"><span class="comment"># c = 110644875422336073350488613774418819991169603750711465190260581119043921549811353108399064284589038384540018965816137286856268590507418636799746759551009749004176545414118128330198437101472882906564195341277423007542422286760940374859966152871273887950174522820162832774361714668826122465471705166574184367478</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>对于这道题，在已知p和q的情况下其实不难，所以解题中心放在对p和q的求解上。</p>
<h2 id="阶乘求模（威尔逊定理的应用）"><a href="#阶乘求模（威尔逊定理的应用）" class="headerlink" title="阶乘求模（威尔逊定理的应用）"></a>阶乘求模（威尔逊定理的应用）</h2><p>在对p的求取过程中，遇到了一个棘手的问题，就是y的阶乘模上x，其中x和y都是非常大的数，但是有一个比较重要的细节就是x-y=99012，不妨可以试着逆推求模，这里用到了一个定理</p>
<blockquote>
<p>威尔逊定理：当<strong>P</strong> 为质数的时候，**( P − 2 ) ! = 1(modp)**  即 <strong>(p−1)！≡−1(modp)</strong></p>
</blockquote>
<p><img src="/2021/10/28/Hackergame-EasyRSA/image-20211029003443721.png" alt="image-20211029003443721"></p>
<p>我们可以想到将阶乘运算转化成余数的运算，由于y与x的大小十分接近，故可以从 <code>(x-1)! ≡ x-1 (modx)</code>往前逆推，</p>
<p>由于 x-1可以写成-1，x-2可以写成-2，以此类推，我们所求的y！的余数即为<code>(-1)*(-2)*...*(-99011)</code>即为 -(99011)!。于是我们可以得到 <code>-99011 * K ≡ x-1 (modx)</code> 用拓展欧几里得定理很容易求出我们所需要的K。</p>
<h2 id="对nextPrime的逆推"><a href="#对nextPrime的逆推" class="headerlink" title="对nextPrime的逆推"></a>对nextPrime的逆推</h2><p>已知一个素数L，求其及其前九个素数。本来我一开始的思路是定义一个num从1递增，一直循环到L-num用for循环十次nextPrime得到素数L停止，乍看感觉没什么问题，但是我忽视了所求到的     L-num并不能保证一定为素数，况且这样计算的时间复杂度很高，遇到很大的数时计算很麻烦。</p>
<blockquote>
<p>质数分布密度：素数分布越来越稀疏，但1e18内任意两个质数的差不会很大，好像有个人证明了不会超过246。</p>
</blockquote>
<p>DBT告诉我可以定义一个起始量L-10000（更精确具体的话可以设置为L-2460），在L-10000到L内肯定含有超过10个素数，只需要将其添加进列表中，只取后10个即可，想法比我的要好得多。</p>
<h1 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line">c = <span class="number">110644875422336073350488613774418819991169603750711465190260581119043921549811353108399064284589038384540018965816137286856268590507418636799746759551009749004176545414118128330198437101472882906564195341277423007542422286760940374859966152871273887950174522820162832774361714668826122465471705166574184367478</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"><span class="built_in">list</span> = []</span><br><span class="line">value_q = <span class="number">5591130088089053683141520294620171646179623062803708281023766040254675625012293743465254007970358536660934858789388093688621793201658889399155357407224541324547522479617669812322262372851929223461622559971534394847970366311206823328200747893961649255426063204482192349202005330622561575868946656570678176047822163692259375233925446556338917358118222905050574458037965803154233167594946713038301249145097770337253930655681648299249481985768272321820718607757023350742647019762122572886601905212830744868048802864679734428398229280780215896045509020793530842541217790352661324630048261329493088812057300480085895399922301827190211956061083460036781018660201163819104150988531352228650991733072010425499238731811243310625701946882701082178190402011133439065106720309788819</span></span><br><span class="line">a = <span class="number">80096058210213458444437404275177554701604739094679033012396452382975889905967</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(a-<span class="number">2460</span>,a+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> sympy.isprime(i):</span><br><span class="line">        <span class="built_in">list</span>.append(i)</span><br><span class="line">n_q = <span class="number">1</span></span><br><span class="line">phi_q = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    n_q = n_q * <span class="built_in">list</span>[-i]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    phi_q = phi_q * (<span class="built_in">list</span>[-i] - <span class="number">1</span>)</span><br><span class="line">q = <span class="built_in">pow</span>(value_q, gmpy2.invert(e, phi_q), n_q)</span><br><span class="line">q = sympy.nextprime(q)</span><br><span class="line">x = <span class="number">11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391760451</span></span><br><span class="line">y = <span class="number">11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391661439</span></span><br><span class="line">ooo = (-<span class="number">1</span> * math.factorial(<span class="number">99011</span>)) % x</span><br><span class="line">p = sympy.nextprime((gmpy2.invert(ooo, x) * (x-<span class="number">1</span>) ) % x)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, gmpy2.invert(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>)), p*q)))</span><br></pre></td></tr></table></figure>



<h1 id="题目答案"><a href="#题目答案" class="headerlink" title="题目答案"></a>题目答案</h1><p>b’flag{CRYPT0_1s_Interesting!}’</p>
]]></content>
      <tags>
        <tag>crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>RAID重组</title>
    <url>/2021/10/13/RAID%E9%87%8D%E7%BB%84/</url>
    <content><![CDATA[<h3 id="修改root密码"><a href="#修改root密码" class="headerlink" title="修改root密码"></a>修改root密码</h3><h4 id="方案一："><a href="#方案一：" class="headerlink" title="方案一："></a>方案一：</h4><p>添加grub启动参数 rw init=/bin/sh 或者 sysroot/bin/sh</p>
<p>chroot &amp; passwd</p>
<h5 id="虚拟机方面"><a href="#虚拟机方面" class="headerlink" title="虚拟机方面"></a>虚拟机方面</h5><p>使用取证大师挂载到本地，然后在添加设备中添加RAID硬盘组本地磁盘进行重组</p>
<p><img src="/2021/10/13/RAID%E9%87%8D%E7%BB%84/image-20211013002605156.png" alt="image-20211013002605156"></p>
<p>导入虚拟机时注意使用转化好的虚拟磁盘（需要全部导入，并且一般选取其中最大的可能包含操作系统的放在首位导入）</p>
<p><img src="/2021/10/13/RAID%E9%87%8D%E7%BB%84/image-20211013002917659.png" alt="image-20211013002917659"></p>
<p><img src="/2021/10/13/RAID%E9%87%8D%E7%BB%84/image-20211013003021252.png" alt="image-20211013003021252"></p>
<p>对其中 ro进行改写为 rw init=sysroot\bin\sh, 即可绕过密码进入系统</p>
<p>后输入chroot sysroot/ 更换根目录</p>
<p>之后就可以用passwd来设置新密码</p>
<p>输入exit后reboot来重启</p>
<h4 id="方案二："><a href="#方案二：" class="headerlink" title="方案二："></a>方案二：</h4><p>挂在可启动的系统上</p>
<p>Chroot &amp; passwd</p>
<p><img src="/2021/10/13/RAID%E9%87%8D%E7%BB%84/image-20211013004758124.png" alt="image-20211013004758124"></p>
<h3 id="一些命令"><a href="#一些命令" class="headerlink" title="一些命令"></a>一些命令</h3><p>ls -lh</p>
<p>cat ect/hostname</p>
<p>fdisk -l 可以查看挂载那些硬盘</p>
<p>fdisk -l 1 less 可以查看有哪些设备</p>
<p>mdadm –help 获取帮助</p>
<p>mdadm –detail /dev/md5</p>
<p>lvm 下 lvdisplay</p>
]]></content>
      <tags>
        <tag>电子数据取证</tag>
      </tags>
  </entry>
  <entry>
    <title>babeRCE</title>
    <url>/2021/10/01/babeRCE/</url>
    <content><![CDATA[<h2 id="babeRCE"><a href="#babeRCE" class="headerlink" title="babeRCE"></a>babeRCE</h2><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="/2021/10/01/babeRCE/image-20211001235119791.png" alt="image-20211001235119791"></p>
<p>解题思路</p>
<p>输入  47.93.215.154:5000/?rce=ls  可以得到   flag.php index.php</p>
<p>目标就是实现指令cat flag.php 不过需要绕开指令检测</p>
<p>在指令中穿插 \ 或 $@ 即可绕开， ${IFS} 可以代替空格</p>
<p><code>http://47.93.215.154:5000/?rce=ca$@t$&#123;IFS&#125;fla$@g.php</code></p>
<p><code>http://47.93.215.154:5000/?rce=ca\t$&#123;IFS&#125;fla\g.php</code></p>
<p>其他的还有待补充</p>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>crypto入门小知识</title>
    <url>/2021/10/03/crypto%E5%85%A5%E9%97%A8%E5%B0%8F%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h2 id="crypto加密类型简介"><a href="#crypto加密类型简介" class="headerlink" title="crypto加密类型简介"></a>crypto加密类型简介</h2><h3 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h3><blockquote>
<p>ASCII is a 7-bit encoding standard which allows the representation of text using the integers 0-127.</p>
</blockquote>
<p>我们可以通过python的chr和ord对其在ASCII和密钥之间转化</p>
<h3 id="Hex"><a href="#Hex" class="headerlink" title="Hex"></a>Hex</h3><blockquote>
<p>对于一串16进制编码，it is something more user-friendly and portable across different systems.</p>
</blockquote>
<p>我们可以通过bytes.fromhex()和hex()对其在HEX和密钥之间转化</p>
<h3 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h3><blockquote>
<p> One character of a Base64 string encodes 6 bits, and so 4 characters of Base64 encode three 8-bit bytes.</p>
</blockquote>
<p>python输入指令前需要import base64</p>
<p>我们可以通过base64.b64encode()和base64.b64decode()之间转化</p>
<h4 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h4><p>给出一串 72bca9b68fc16ac7beeb8f849dca1d8a783e8acf9679bf9269f7bf</p>
<p>先对其进行bytes.fromhex()转化，得到</p>
<p>b’r\xbc\xa9\xb6\x8f\xc1j\xc7\xbe\xeb\x8f\x84\x9d\xca\x1d\x8ax&gt;\x8a\xcf\x96y\xbf\x92i\xf7\xbf’</p>
<p>再输入base64.b64encode()</p>
<p>得到最终的flag为 b’crypto/Base+64+Encoding+is+Web+Safe/‘</p>
<h3 id="Bytes-and-Big-Integers"><a href="#Bytes-and-Big-Integers" class="headerlink" title="Bytes and Big Integers"></a>Bytes and Big Integers</h3><p><img src="/2021/10/03/crypto%E5%85%A5%E9%97%A8%E5%B0%8F%E7%9F%A5%E8%AF%86/image-20211003202156335.png" alt="image-20211003202156335"></p>
<p>对于RSA加密，习惯上先对一段密文进行bytes_to_long()加密，得到一串数字</p>
<p>python使用指令前需要from Crypto.Util.number import *</p>
<p>我们通过long_to_bytes()和bytes_to_long()在数字和密钥之间转化</p>
<h3 id="XOR-Starter"><a href="#XOR-Starter" class="headerlink" title="XOR Starter"></a>XOR Starter</h3><blockquote>
<p>For longer binary numbers we XOR bit by bit</p>
</blockquote>
<p>我们可以通过首先将每个字符转换为代表 Unicode 字符的整数来 XOR 字符串</p>
<p>XOR在python中表示为 ^</p>
<p>下图为XOR的几条运算律</p>
<p><img src="/2021/10/03/crypto%E5%85%A5%E9%97%A8%E5%B0%8F%E7%9F%A5%E8%AF%86/image-20211003225400497.png" alt="image-20211003225400497"></p>
<h3 id="Quadratic-Residues"><a href="#Quadratic-Residues" class="headerlink" title="Quadratic Residues"></a>Quadratic Residues</h3><blockquote>
<p>We say that an integer <code>x</code> is a <em>Quadratic Residue</em> if there exists an <code>a</code> such that <code>a2 = x mod p</code>. If there is no such solution, then the integer is a <em>Quadratic Non-Residue</em>.</p>
</blockquote>
<blockquote>
<p>If <code>a2 = x</code> then (-a)2 = x. So if <code>x</code> is a quadratic residue in some finite field, then there are always two solutions for <code>a</code>.</p>
</blockquote>
]]></content>
      <tags>
        <tag>crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>easyRSA</title>
    <url>/2021/10/04/easyRSA/</url>
    <content><![CDATA[<h2 id="信息加密与验证"><a href="#信息加密与验证" class="headerlink" title="信息加密与验证"></a>信息加密与验证</h2><p>How can you ensure that the person receiving your message knows that you wrote it?</p>
<p>You’ve been asked out on a date, and you want to send a message telling them that you’d love to go, however a jealous lover isn’t so happy about this.</p>
<p>When you send your message saying yes, your jealous lover intercepts the message and corrupts it so it now says no!</p>
<p>We can protect against these attacks by signing the message.</p>
<p>Imagine you write a message <code>M</code>. You encrypt this message with your <strong>friend’s public key</strong>: <code>C = Me0 mod N0</code>.</p>
<p>To sign this message, you calculate the hash of the message: <code>H(M)</code> and “encrypt” this with <strong>your private key</strong>: <code>S = H(M)d1 mod N1</code>.</p>
<p>Your friend can decrypt the message using <strong>their private key</strong>: <code>m = Cd0 mod N0</code>. Using your public key they calculate <code>s = Se1 mod N1</code>.</p>
<p>Now by computing <code>H(m)</code> and comparing it to <code>s</code>: <code>assert H(m) == s</code>, they can ensure that the message you sent them, is the message that they received!</p>
<blockquote>
<p>In real cryptosystems, it’s <a href="https://crypto.stackexchange.com/a/12138">best practice to use separate keys</a> for encrypting and signing messages.</p>
</blockquote>
<p>大意就是给了一个消息，对其用朋友的公钥加密，让朋友用朋友的私钥解密获得原消息</p>
<p>同时，对消息的HASH值用自己的私钥加密，让朋友用自己的公钥解密，并与获得的消息的HASH值比对</p>
<p>如果HASH值相同，那就说明消息并没有被篡改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ooo = bytes_to_long(hashlib.sha256(flag).digest())</span><br><span class="line">answer = long_to_bytes(pow(ooo, d, N)).hex()</span><br></pre></td></tr></table></figure>

<p>由于HASH加密后的值无法进行计算，所以我们需要先用.digest()将其转换成bytes形式，再将bytes转化成可以计算的Long整型值。</p>
<h2 id="查看n的素因子"><a href="#查看n的素因子" class="headerlink" title="查看n的素因子"></a>查看n的素因子</h2><p>遇到了一个N， 可以先去<a href="http://factordb.com/index.php">factordb.com</a>查看一下N的素因子是否曾被记录，若可被完全分解，知道了p和q，那么问题就迎刃而解了</p>
<h2 id="小公钥指数攻击："><a href="#小公钥指数攻击：" class="headerlink" title="小公钥指数攻击："></a>小公钥指数攻击：</h2><h3 id="e-1"><a href="#e-1" class="headerlink" title="e=1"></a>e=1</h3><p>由于gmpy2.invert(1, k)对于任意的 K， 得到的结果都为 1</p>
<p>则我们可以直接print(long_to_bytes(pow(c, 1, n)))得到结果</p>
<h3 id="e很小，且c-远远小于-n"><a href="#e很小，且c-远远小于-n" class="headerlink" title="e很小，且c 远远小于 n"></a>e很小，且c 远远小于 n</h3><p> 即说明 flag ** e = c, 可推出结果</p>
<h2 id="低解密指数攻击："><a href="#低解密指数攻击：" class="headerlink" title="低解密指数攻击："></a>低解密指数攻击：</h2><h3 id="Wiener’s-Attack"><a href="#Wiener’s-Attack" class="headerlink" title="Wiener’s Attack"></a>Wiener’s Attack</h3><p><strong>在RSA中d也称为解密指数，当d比较小的时候，e也就显得特别大了。</strong></p>
<p><strong>适用情况：e过大或过小（一般e过大时使用）</strong></p>
<p>可以使用附件RSA工具里的rsa-wiener-attack-master</p>
<p>在 d 比较小（d &lt; 1/3 * N ** 1 / 4）时，攻击者可以使用 <strong>Wiener’s Attack</strong> 来获得私钥。</p>
<h3 id="Boneh-attack"><a href="#Boneh-attack" class="headerlink" title="Boneh attack"></a>Boneh attack</h3><p><img src="/2021/10/04/easyRSA/image-20211008225355445.png" alt="image-20211008225355445"></p>
<p><img src="/2021/10/04/easyRSA/image-20211008225643406.png" alt="image-20211008225643406"></p>
<p>由于公钥e的选取和 φ(N)的大小差不多，所以k的大小和d的大小差不多，于是有</p>
<p><img src="/2021/10/04/easyRSA/image-20211008225759836.png" alt="image-20211008225759836"></p>
<p><img src="/2021/10/04/easyRSA/image-20211008230006142.png" alt="image-20211008230006142"></p>
<p>Then the vector <img src="/2021/10/04/easyRSA/image-20211008230033466.png" alt="image-20211008230033466">is a short vector of the lattice, under the assumption that <em>d</em> is very low. Applying a lattice reduction (see the CryptoHack challenge <a href="https://cryptohack.org/challenges/maths/">Gaussian Reduction</a> to implement it yourself, or use LLL), this vector can be found, and <em>d</em> can be extracted from its second coordinate.</p>
<p>下面是使用 SageMath version 9.1的题解</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">N = 0x665166804cd78e8197073f65f58bca14e019982245fcc7cad74535e948a4e0258b2e919bf3720968a00e5240c5e1d6b8831d8fec300d969fccec6cce11dde826d3fbe0837194f2dc64194c78379440671563c6c75267f0286d779e6d91d3e9037c642a860a894d8c45b7ed564d341501cedf260d3019234f2964ccc6c56b6de8a4f66667e9672a03f6c29d95100cdf5cb363d66f2131823a953621680300ab3a2eb51c12999b6d4249dde499055584925399f3a8c7a4a5a21f095878e80bbc772f785d2cbf70a87c6b854eb566e1e1beb7d4ac6eb46023b3dc7fdf34529a40f5fc5797f9c15c54ed4cb018c072168e9c30ca3602e00ea4047d2e5686c6eb37b9</span><br><span class="line">e = 0x2c998e57bc651fe4807443dbb3e794711ca22b473d7792a64b7a326538dc528a17c79c72e425bf29937e47b2d6f6330ee5c13bfd8564b50e49132d47befd0ee2e85f4bfe2c9452d62ef838d487c099b3d7c80f14e362b3d97ca4774f1e4e851d38a4a834b077ded3d40cd20ddc45d57581beaa7b4d299da9dec8a1f361c808637238fa368e07c7d08f5654c7b2f8a90d47857e9b9c0a81a46769f6307d5a4442707afb017959d9a681fa1dc8d97565e55f02df34b04a3d0a0bf98b7798d7084db4b3f6696fa139f83ada3dc70d0b4c57bf49f530dec938096071f9c4498fdef9641dfbfe516c985b27d1748cc6ce1a4beb1381fb165a3d14f61032e0f76f095d</span><br><span class="line">c = 0x503d5dd3bf3d76918b868c0789c81b4a384184ddadef81142eabdcb78656632e54c9cb22ac2c41178607aa41adebdf89cd24ec1876365994f54f2b8fc492636b59382eb5094c46b5818cf8d9b42aed7e8051d7ca1537202d20ef945876e94f502e048ad71c7ad89200341f8071dc73c2cc1c7688494cad0110fca4854ee6a1ba999005a650062a5d55063693e8b018b08c4591946a3fc961dae2ba0c046f0848fbe5206d56767aae8812d55ee9decc1587cf5905887846cd3ecc6fc069e40d36b29ee48229c0c79eceab9a95b11d15421b8585a2576a63b9f09c56a4ca1729680410da237ac5b05850604e2af1f4ede9cf3928cbb3193a159e64482928b585ac</span><br><span class="line">s = floor(sqrt(N))</span><br><span class="line">M = Matrix([[e, s], [N, 0]])</span><br><span class="line">Mred = M.LLL()</span><br><span class="line">D = [abs(Mred[i, 1]) // s for i in [0,1]]</span><br><span class="line">for d in D:</span><br><span class="line">    t = randint(2, N - 2)</span><br><span class="line">    tt = pow(t, e, N)</span><br><span class="line">    if tt^d != t:</span><br><span class="line">        continue</span><br><span class="line">    flag = int(pow(c, d, N))</span><br><span class="line">    flag = flag.to_bytes((flag.bit_length() + 7)//8, &#x27;big&#x27;)</span><br><span class="line">    print(f&#x27;FLAG: &#123;flag.decode()&#125;&#x27;)</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>linux服务器取证</title>
    <url>/2021/10/16/linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%96%E8%AF%81/</url>
    <content><![CDATA[<h2 id="Linux取证场景"><a href="#Linux取证场景" class="headerlink" title="Linux取证场景"></a>Linux取证场景</h2><h3 id="日志检查"><a href="#日志检查" class="headerlink" title="日志检查"></a>日志检查</h3><p>系统的开关机，用户登录，各种的服务的启动、关闭、故障，用户的操作历史等等，都会在本地或者其他地方留下痕迹</p>
<h3 id="容器检查"><a href="#容器检查" class="headerlink" title="容器检查"></a>容器检查</h3><p>容器虚拟化可以方便地在服务器上部署服务群集。VM、Docker、K&amp;s(Kubernetes)，虚拟机-&gt;容器虚拟化-&gt;虚拟集群</p>
<h3 id="文件分析"><a href="#文件分析" class="headerlink" title="文件分析"></a>文件分析</h3><p>分析应用程序的工作目录，寻找引用属性、配置，从而进行场景复现和证据收集</p>
<h2 id="Linux-FHS"><a href="#Linux-FHS" class="headerlink" title="Linux FHS"></a>Linux FHS</h2><table>
<thead>
<tr>
<th>说明</th>
<th>目录</th>
</tr>
</thead>
<tbody><tr>
<td>/</td>
<td>根目录，根目录下一般只有以下文件夹，没有文件</td>
</tr>
<tr>
<td>/bin</td>
<td>存放了系统命令的可执行文件，例如cat、vi，相当于Windows的系统环境变量PATH?</td>
</tr>
<tr>
<td>/home</td>
<td>用户文件夹，例如/home/user1，/home/user2</td>
</tr>
<tr>
<td>/usr</td>
<td>存放了用户应用的可执行文件、代码、动态链接库等等，相当于Windows的用户环境变量PATH</td>
</tr>
<tr>
<td>/usr/bin</td>
<td>用户安装的应用可执行文件</td>
</tr>
<tr>
<td>/usr/doc</td>
<td>linux文档</td>
</tr>
<tr>
<td>/usr/include</td>
<td>头文件目录</td>
</tr>
<tr>
<td>/usr/lib</td>
<td>存放动态链接库、软件包配置文件</td>
</tr>
<tr>
<td>/usr/man</td>
<td>执行man命令显示的帮助文档</td>
</tr>
<tr>
<td>/usr/src</td>
<td>源代码，例如linux内核源码：/user/src/linux</td>
</tr>
<tr>
<td>/usr/local</td>
<td>本机单独增加的命令、动态链接库</td>
</tr>
<tr>
<td>/root</td>
<td>root用户的用户文件夹被单独拿出来放到root目录里，不在home目录里</td>
</tr>
<tr>
<td>/etc</td>
<td>存放了系统配置，例如release</td>
</tr>
<tr>
<td>/opt</td>
<td>可选应用程序的安装目录</td>
</tr>
<tr>
<td>/dev</td>
<td>存放设备文件（分字符设备和块设备）</td>
</tr>
<tr>
<td>/boot</td>
<td>系统引导</td>
</tr>
<tr>
<td>/lib</td>
<td>存放跟文件系统中的应用程序所需要的共享库级内核模块。共享库又叫动态链接共享库，作用类似windows里的.dll文件，存放了根文件系统程序运行所需的共享文件。</td>
</tr>
<tr>
<td>/tmp</td>
<td>临时文件夹</td>
</tr>
<tr>
<td>/var/log</td>
<td>日志</td>
</tr>
<tr>
<td>/lost+found</td>
<td>意外丢失的文件</td>
</tr>
<tr>
<td>/proc</td>
<td>虚假的目录，磁盘中并不存在，其中的内容是系统映射出来的信息</td>
</tr>
</tbody></table>
<h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><h3 id="用户登录与操作历史"><a href="#用户登录与操作历史" class="headerlink" title="用户登录与操作历史"></a>用户登录与操作历史</h3><p><code>wtmp</code>文件：记录了用户登录历史和登陆时间</p>
<p><code>btmp</code>文件：记录了未能成功登录的用户名、时间、来源</p>
<p><code>.bash_history</code>：在每个用户的用户文件夹中，记录了该用户使用Bash执行过的命令</p>
<h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><p>FTP的登录记录</p>
<p>MySQL的登陆记录</p>
]]></content>
      <tags>
        <tag>电子数据取证</tag>
      </tags>
  </entry>
  <entry>
    <title>web方向入门</title>
    <url>/2021/10/01/web%E6%96%B9%E5%90%91%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="Web安全入门指北—GET"><a href="#Web安全入门指北—GET" class="headerlink" title="Web安全入门指北—GET"></a>Web安全入门指北—GET</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2021/10/01/web%E6%96%B9%E5%90%91%E5%85%A5%E9%97%A8/get.png"></p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>变量$moe通过get的方式传参，并且当变量$moe == ’flag‘时给出flag</p>
<p>题目给出的网址为47.93.215.154:10000，只需要在后面加上?moe=flag即可</p>
<p><img src="/2021/10/01/web%E6%96%B9%E5%90%91%E5%85%A5%E9%97%A8/image-20211001132028841.png" alt="image-20211001132028841"></p>
<p>或者可以使用postman工具，在params传参。</p>
<p>Params：参数。会直接出现在 url 中，一般为 GET 请求的参数。</p>
<h2 id="Web安全入门指北—POST"><a href="#Web安全入门指北—POST" class="headerlink" title="Web安全入门指北—POST"></a>Web安全入门指北—POST</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2021/10/01/web%E6%96%B9%E5%90%91%E5%85%A5%E9%97%A8/post.png"></p>
<h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>浏览器一般使用get方法，对于post则需要使用一些工具，如postman。</p>
<p>在post中Key填入moe，Value填入flag，点击Send即可。</p>
<p><img src="/2021/10/01/web%E6%96%B9%E5%90%91%E5%85%A5%E9%97%A8/image-20211001132109749.png" alt="image-20211001132109749"></p>
<p>Body：请求体。分表单提交、文件提交、JSON提交等多种方式</p>
<p>form-data：表单提交。相当于 html 的 form 标签中 multipart/form-data。可以上传文件、键值对等<br>x-www-form-urlencoded：表单提交。相当于 html 中 form 标签中 application/x-www-from-urlencoded。上传表单时会自动转换为键值对提交。<br>raw：文本提交。可以选择 XML、JSON、TEXT、HTML 等。<br>binary：二进制文件提交。通常用来上传文件、图片等。</p>
<h2 id="Web安全入门指北—小饼干"><a href="#Web安全入门指北—小饼干" class="headerlink" title="Web安全入门指北—小饼干"></a>Web安全入门指北—小饼干</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2021/10/01/web%E6%96%B9%E5%90%91%E5%85%A5%E9%97%A8/image-20211001132514014.png" alt="image-20211001132514014"></p>
<h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>题目表述为小饼干，即cookie。</p>
<p><img src="/2021/10/01/web%E6%96%B9%E5%90%91%E5%85%A5%E9%97%A8/image-20211001133212230.png" alt="image-20211001133212230"></p>
<p>在网络项请求标头中发现了Cookie: VIP=0，则指需要构造HEADER中KEY=Cookie，VALUE=VIP=1，即可得到flag。</p>
<p><img src="/2021/10/01/web%E6%96%B9%E5%90%91%E5%85%A5%E9%97%A8/image-20211001133532510.png" alt="image-20211001133532510"></p>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>几道web题</title>
    <url>/2021/10/01/%E5%87%A0%E9%81%93web%E9%A2%98/</url>
    <content><![CDATA[<h2 id="2048"><a href="#2048" class="headerlink" title="2048"></a>2048</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2021/10/01/%E5%87%A0%E9%81%93web%E9%A2%98/image-20211001191433709.png" alt="image-20211001191433709"></p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><img src="/2021/10/01/%E5%87%A0%E9%81%93web%E9%A2%98/image-20211001191507747.png" alt="image-20211001191507747"></p>
<p>打开网页后是一个如图所示的小游戏，几番折腾后游戏结束</p>
<p><img src="/2021/10/01/%E5%87%A0%E9%81%93web%E9%A2%98/image-20211001191642280.png" alt="image-20211001191642280"></p>
<p><img src="/2021/10/01/%E5%87%A0%E9%81%93web%E9%A2%98/image-20211001191653895.png" alt="image-20211001191653895"></p>
<p>我们按F12查看源码，搜索flag和score相关关键词，发现了一个函数，即为解体的关键</p>
<p><img src="/2021/10/01/%E5%87%A0%E9%81%93web%E9%A2%98/image-20211001194930314.png" alt="image-20211001194930314"></p>
<p><img src="/2021/10/01/%E5%87%A0%E9%81%93web%E9%A2%98/image-20211001191908626.png" alt="image-20211001191908626"></p>
<p>当游戏失败时，调用obj.getFlag，并对其中obj.score的数值进行判断，仅当score&gt;50001时才给出flag</p>
<h4 id="解法一："><a href="#解法一：" class="headerlink" title="解法一："></a>解法一：</h4><p>在F12的控制台中输入</p>
<p><img src="/2021/10/01/%E5%87%A0%E9%81%93web%E9%A2%98/image-20211001195606298.png" alt="image-20211001195606298"></p>
<h4 id="解法二："><a href="#解法二：" class="headerlink" title="解法二："></a>解法二：</h4><p>打开网址47.93.215.154:5001/flag.php?score=50001即可得到flag</p>
<p><img src="/2021/10/01/%E5%87%A0%E9%81%93web%E9%A2%98/image-20211001195557547.png" alt="image-20211001195557547"></p>
<h2 id="Web-Inc"><a href="#Web-Inc" class="headerlink" title="Web_Inc"></a>Web_Inc</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2021/10/01/%E5%87%A0%E9%81%93web%E9%A2%98/image-20211001195843736.png" alt="image-20211001195843736"></p>
<h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>变量a通过get传参，变量b通过post传参</p>
<p>题中对a和b的值和MD5进行比较，当且仅当值不等且MD5相等时给出flag</p>
<h4 id="相关知识点："><a href="#相关知识点：" class="headerlink" title="相关知识点："></a>相关知识点：</h4><h5 id="等号的数量问题："><a href="#等号的数量问题：" class="headerlink" title="等号的数量问题："></a>等号的数量问题：</h5><p>三个等号 为 类型相等 并且 值相等</p>
<p>两个等号 仅仅为 值相等</p>
<p><strong>(若字符串以数字开头，则取开头数字作为转换结果，若无则输出0)</strong></p>
<p>“abc” == 0  值为 True</p>
<h5 id="MD5碰撞及绕过："><a href="#MD5碰撞及绕过：" class="headerlink" title="MD5碰撞及绕过："></a>MD5碰撞及绕过：</h5><h6 id="1、构造数组"><a href="#1、构造数组" class="headerlink" title="1、构造数组"></a>1、构造数组</h6><p>在 PHP5 和 PHP7 中，当两个 md5 进行比较时，若参数是不同的数组，那么 <code>==</code> 和 <code>===</code> 比较的结果均为 True</p>
<p>$a = $GET[“a”]; $b = $GET[“b”];时可以构造<strong>a[]=1&amp;&amp;b[]=1</strong></p>
<h6 id="2、构造0E（仅适用于”-“）"><a href="#2、构造0E（仅适用于”-“）" class="headerlink" title="2、构造0E（仅适用于”==“）"></a>2、构造0E（仅适用于”==“）</h6><p>如果md5的值是以0e开头的，那么就与其他的0e开头的Md5值是相等的</p>
<p><img src="/2021/10/01/%E5%87%A0%E9%81%93web%E9%A2%98/image-20211001211508144.png" alt="image-20211001211508144"></p>
<p>得到FLAG</p>
<h2 id="ezinclude（我们仍未知道那天所解的题的解法）"><a href="#ezinclude（我们仍未知道那天所解的题的解法）" class="headerlink" title="ezinclude（我们仍未知道那天所解的题的解法）"></a>ezinclude<em><strong>（我们仍未知道那天所解的题的解法）</strong></em></h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2021/10/01/%E5%87%A0%E9%81%93web%E9%A2%98/image-20211001225145844.png" alt="image-20211001225145844"></p>
<h3 id="题解（尚未知晓原理，以后补充）"><a href="#题解（尚未知晓原理，以后补充）" class="headerlink" title="题解（尚未知晓原理，以后补充）"></a>题解（尚未知晓原理，以后补充）</h3><p><em><strong>47.98.215.112:5000/?file=php://filter/convert.base64-encode/resource=flag.php</strong></em></p>
<p>得到PD8kZmxhZz0ibW9lY3Rme3hkc2VjNmFzZGdhczdhaGZzZmF4Y3pjfSI7Pz4=</p>
<p>利用base64解码得到<?$flag="moectf{xdsec6asdgas7ahfsfaxczc}";?></p>
<h2 id="Do-you-know-HTTP"><a href="#Do-you-know-HTTP" class="headerlink" title="Do you know HTTP?"></a>Do you know HTTP?</h2><p>打开网页几个大字赫然在目</p>
<p><img src="/2021/10/01/%E5%87%A0%E9%81%93web%E9%A2%98/image-20211002110958776.png" alt="image-20211002110958776"></p>
<p>借鉴之前小饼干的经验，该题应该是想要让我们伪造请求方式和各种的请求头来解题</p>
<p><img src="/2021/10/01/%E5%87%A0%E9%81%93web%E9%A2%98/image-20211002112048169.png" alt="image-20211002112048169"></p>
<p>伪造请求头 X-Forwarded-For： 简称XFF头，它代表客户端，也就是HTTP的请求端真实的IP。</p>
<p> 请求头格式：X-Forwarded-For: client, proxy1, proxy2 client</p>
<p>即客户端真实 ip，后两项是代理 ip，可缺省，最终在服务端接收前都会被补齐。</p>
<p><img src="/2021/10/01/%E5%87%A0%E9%81%93web%E9%A2%98/image-20211002112323207.png" alt="image-20211002112323207"></p>
<p>伪造请求头Referer可以伪造来源地址</p>
<p><img src="/2021/10/01/%E5%87%A0%E9%81%93web%E9%A2%98/image-20211002112704997.png" alt="image-20211002112704997"></p>
<p>User-Agent代表的是浏览服务器，只需要把值更改为LT即可</p>
<p><img src="/2021/10/01/%E5%87%A0%E9%81%93web%E9%A2%98/image-20211002113354175.png" alt="image-20211002113354175"></p>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>博客更新流程</title>
    <url>/2021/10/01/%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="博客流程"><a href="#博客流程" class="headerlink" title="博客流程"></a>博客流程</h2><h3 id="1、写博客"><a href="#1、写博客" class="headerlink" title="1、写博客"></a>1、写博客</h3><p>执行 hexo new “名字”，hexo 创建该 md 文件，使用 typora 编辑并保存</p>
<h3 id="2、清缓存-amp-更新渲染"><a href="#2、清缓存-amp-更新渲染" class="headerlink" title="2、清缓存&amp;更新渲染"></a>2、清缓存&amp;更新渲染</h3><p>执行hexo clean清除缓存，</p>
<p>随后执行hexo g重新渲染静态页面</p>
<h3 id="3、推送到码云"><a href="#3、推送到码云" class="headerlink" title="3、推送到码云"></a>3、推送到码云</h3><p>执行hexo d</p>
<h3 id="5-预览本地静态界面"><a href="#5-预览本地静态界面" class="headerlink" title="5.预览本地静态界面"></a>5.预览本地静态界面</h3><p>执行hexo s</p>
<h3 id="6、更新码云的静态页面"><a href="#6、更新码云的静态页面" class="headerlink" title="6、更新码云的静态页面"></a>6、更新码云的静态页面</h3><p><img src="/2021/10/01/%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0%E6%B5%81%E7%A8%8B/alpha.png"></p>
<h3 id="7、重新访问网站"><a href="#7、重新访问网站" class="headerlink" title="7、重新访问网站"></a>7、重新访问网站</h3><p>如果遇到多次刷新无效果的情况。可以试试按F12在网络项下刷新</p>
]]></content>
      <tags>
        <tag>博客入门</tag>
      </tags>
  </entry>
  <entry>
    <title>反序列化</title>
    <url>/2021/10/02/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h2 id="eeeeeeeeeeezunserialize"><a href="#eeeeeeeeeeezunserialize" class="headerlink" title="eeeeeeeeeeezunserialize"></a>eeeeeeeeeeezunserialize</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/2021/10/02/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20211002114245428.png" alt="image-20211002114245428"></p>
<h3 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h3><h4 id="魔术函数"><a href="#魔术函数" class="headerlink" title="魔术函数"></a>魔术函数</h4><h5 id="1-constuct-构造函数"><a href="#1-constuct-构造函数" class="headerlink" title="1.constuct()构造函数"></a>1.constuct()构造函数</h5><p>通常实例化完一个对象之后，都要对该对象的属性进行初始化！在实例化一个对象的时候，PHP系统会自动的调用一个名字叫作construct()的方法，我们把这个方法叫作“构造方法”！</p>
<p>其中，构造方法可以没有参数！</p>
<h5 id="2-destruct-析构方法"><a href="#2-destruct-析构方法" class="headerlink" title="2.destruct()析构方法"></a>2.destruct()析构方法</h5><p>与构造方法是一对，构造方法是在一个对象“出生”的时候由系统自动调用的，而析构方法是在一个对象“消失”的时候由系统自动调用的！</p>
<p>析构方法的名字叫destruct()；注意里面不能有任何的参数！</p>
<h5 id="3-clone-克隆"><a href="#3-clone-克隆" class="headerlink" title="3.clone()克隆"></a>3.clone()克隆</h5><p>触发时机：是在克隆一个对象的时候，对新对象进行初始化的工作</p>
<h5 id="4-autoload-自动加载类"><a href="#4-autoload-自动加载类" class="headerlink" title="4.autoload()自动加载类"></a>4.autoload()自动加载类</h5><p>当调用不存在的类的时候自动调用！</p>
<h5 id="5-tostring"><a href="#5-tostring" class="headerlink" title="5.tostring()"></a>5.tostring()</h5><p>当将对象当成字符串使用的时候自动调用</p>
<h5 id="6-invoke"><a href="#6-invoke" class="headerlink" title="6.invoke()"></a>6.invoke()</h5><p>当将对象当成函数使用的时候自动调用</p>
<h5 id="7-set"><a href="#7-set" class="headerlink" title="7,set()"></a>7,set()</h5><p>当对无法访问的属性赋值时自动调用（比如：类外调用私有属性）</p>
<h5 id="8-get"><a href="#8-get" class="headerlink" title="8.get()"></a>8.get()</h5><p>当对获取无法访问的属性值的时候自动调用</p>
<h5 id="9-unset"><a href="#9-unset" class="headerlink" title="9.unset()"></a>9.unset()</h5><p>当销毁无法访问的属性的时候自动调用</p>
<h5 id="10-isset"><a href="#10-isset" class="headerlink" title="10.isset()"></a>10.isset()</h5><p>当判断无法访问的属性是否存在的时候自动调用</p>
<h5 id="11-call"><a href="#11-call" class="headerlink" title="11.call()"></a>11.call()</h5><p>当调用无法访问的普通方法时自动触发</p>
<h5 id="12-callststic"><a href="#12-callststic" class="headerlink" title="12.callststic()"></a>12.callststic()</h5><p>当无法通过静态方法访问时自动触发</p>
<h5 id="13-sleep"><a href="#13-sleep" class="headerlink" title="13.__sleep()"></a>13.__sleep()</h5><p>执行serialize()时，先会调用这个函数</p>
<h5 id="14-wakeup"><a href="#14-wakeup" class="headerlink" title="14.__wakeup()"></a>14.__wakeup()</h5><p>执行unserialize()时，先会调用这个函数</p>
<h4 id="POP链"><a href="#POP链" class="headerlink" title="POP链"></a>POP链</h4><p>在二进制利用时，ROP 链构造中是寻找当前系统环境中或者内存环境里已经存在的、具有固定地址且带有返回操作的指令集，而 POP 链的构造则是寻找程序当前环境中已经定义了或者能够动态加载的对象中的属性（函数方法），将一些可能的调用组合在一起形成一个完整的、具有目的性的操作。二进制中通常是由于内存溢出控制了指令执行流程，而反序列化过程就是控制代码执行流程的方法之一，当然进行反序列化的数据能够被用户输入所控制。</p>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>数字取证</title>
    <url>/2021/10/12/%E6%95%B0%E5%AD%97%E5%8F%96%E8%AF%81/</url>
    <content><![CDATA[<h1 id="取证"><a href="#取证" class="headerlink" title="取证"></a>取证</h1><h2 id="电子数据取证"><a href="#电子数据取证" class="headerlink" title="电子数据取证"></a>电子数据取证</h2><h3 id="活取证："><a href="#活取证：" class="headerlink" title="活取证："></a>活取证：</h3><h4 id="抓取文件metadata-访问记录-、创建时间线、命令历史、日志文件、哈希摘要、内存等等"><a href="#抓取文件metadata-访问记录-、创建时间线、命令历史、日志文件、哈希摘要、内存等等" class="headerlink" title="抓取文件metadata(访问记录)、创建时间线、命令历史、日志文件、哈希摘要、内存等等"></a>抓取文件metadata(访问记录)、创建时间线、命令历史、日志文件、哈希摘要、内存等等</h4><h4 id="采用未受感染的程序进行取证"><a href="#采用未受感染的程序进行取证" class="headerlink" title="采用未受感染的程序进行取证"></a>采用未受感染的程序进行取证</h4><h4 id="U盘、网络-收集证据"><a href="#U盘、网络-收集证据" class="headerlink" title="U盘、网络 收集证据"></a>U盘、网络 收集证据</h4><h3 id="死取证："><a href="#死取证：" class="headerlink" title="死取证："></a>死取证：</h3><h4 id="关机后对硬盘进行镜像操作"><a href="#关机后对硬盘进行镜像操作" class="headerlink" title="关机后对硬盘进行镜像操作"></a>关机后对硬盘进行镜像操作</h4><h2 id="电子取证比赛考察范围"><a href="#电子取证比赛考察范围" class="headerlink" title="电子取证比赛考察范围"></a>电子取证比赛考察范围</h2><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><h4 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h4><h4 id="UNIX-Linux"><a href="#UNIX-Linux" class="headerlink" title="UNIX/Linux"></a>UNIX/Linux</h4><h4 id="移动终端"><a href="#移动终端" class="headerlink" title="移动终端"></a>移动终端</h4><h4 id="网络数据取证-等等"><a href="#网络数据取证-等等" class="headerlink" title="网络数据取证 等等"></a>网络数据取证 等等</h4>]]></content>
      <tags>
        <tag>电子数据取证</tag>
      </tags>
  </entry>
  <entry>
    <title>图解密码技术笔记</title>
    <url>/2021/10/27/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><img src="/2021/10/27/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/image-20211027003542769.png" alt="image-20211027003542769"></p>
<h1 id="古典密码"><a href="#古典密码" class="headerlink" title="古典密码"></a>古典密码</h1><h2 id="凯撒密码："><a href="#凯撒密码：" class="headerlink" title="凯撒密码："></a>凯撒密码：</h2><p> 穷举26种情况即可</p>
<h2 id="简单替换密码："><a href="#简单替换密码：" class="headerlink" title="简单替换密码："></a>简单替换密码：</h2><p>频率分析（可以参考字母频率表）</p>
<p><img src="/2021/10/27/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/image-20211027004404820.png" alt="image-20211027004404820"></p>
<table>
<thead>
<tr>
<th>字母</th>
<th>英语中出现的频率</th>
<th>首字母</th>
<th>单词频率</th>
</tr>
</thead>
<tbody><tr>
<td><strong>a</strong></td>
<td>8.167%</td>
<td><strong>a</strong></td>
<td>11.602%</td>
</tr>
<tr>
<td><strong>b</strong></td>
<td>1.492%</td>
<td><strong>b</strong></td>
<td>4.702%</td>
</tr>
<tr>
<td><strong>c</strong></td>
<td>2.782%</td>
<td><strong>c</strong></td>
<td>3.511%</td>
</tr>
<tr>
<td><strong>d</strong></td>
<td>4.253%</td>
<td><strong>d</strong></td>
<td>2.670%</td>
</tr>
<tr>
<td><strong>e</strong></td>
<td>12.702%</td>
<td><strong>e</strong></td>
<td>2.007%</td>
</tr>
<tr>
<td><strong>f</strong></td>
<td>2.228%</td>
<td><strong>f</strong></td>
<td>3.779%</td>
</tr>
<tr>
<td><strong>g</strong></td>
<td>2.015%</td>
<td><strong>g</strong></td>
<td>1.950%</td>
</tr>
<tr>
<td><strong>h</strong></td>
<td>6.094%</td>
<td><strong>h</strong></td>
<td>7.232%</td>
</tr>
<tr>
<td><strong>i</strong></td>
<td>6.966%</td>
<td><strong>i</strong></td>
<td>6.286%</td>
</tr>
<tr>
<td><strong>j</strong></td>
<td>0.153%</td>
<td><strong>j</strong></td>
<td>0.590%</td>
</tr>
<tr>
<td><strong>k</strong></td>
<td>0.772%</td>
<td><strong>k</strong></td>
<td>0.597%</td>
</tr>
<tr>
<td><strong>l</strong></td>
<td>4.025%</td>
<td><strong>l</strong></td>
<td>2.705%</td>
</tr>
<tr>
<td><strong>m</strong></td>
<td>2.406%</td>
<td><strong>m</strong></td>
<td>4.374%</td>
</tr>
<tr>
<td><strong>n</strong></td>
<td>6.749%</td>
<td><strong>n</strong></td>
<td>2.365%</td>
</tr>
<tr>
<td><strong>o</strong></td>
<td>7.507%</td>
<td><strong>o</strong></td>
<td>6.264%</td>
</tr>
<tr>
<td><strong>p</strong></td>
<td>1.929%</td>
<td><strong>p</strong></td>
<td>2.545%</td>
</tr>
<tr>
<td><strong>q</strong></td>
<td>0.095%</td>
<td><strong>q</strong></td>
<td>0.173%</td>
</tr>
<tr>
<td><strong>r</strong></td>
<td>5.987%</td>
<td><strong>r</strong></td>
<td>1.653%</td>
</tr>
<tr>
<td><strong>s</strong></td>
<td>6.327%</td>
<td><strong>s</strong></td>
<td>16.671%</td>
</tr>
<tr>
<td><strong>t</strong></td>
<td>9.056%</td>
<td><strong>t</strong></td>
<td>7.755%</td>
</tr>
<tr>
<td><strong>u</strong></td>
<td>2.758%</td>
<td><strong>u</strong></td>
<td>1.487%</td>
</tr>
<tr>
<td><strong>v</strong></td>
<td>0.978%</td>
<td><strong>v</strong></td>
<td>0.649%</td>
</tr>
<tr>
<td><strong>w</strong></td>
<td>2.360%</td>
<td><strong>w</strong></td>
<td>6.753%</td>
</tr>
<tr>
<td><strong>x</strong></td>
<td>0.150%</td>
<td><strong>x</strong></td>
<td>0.034%</td>
</tr>
<tr>
<td><strong>y</strong></td>
<td>1.974%</td>
<td><strong>y</strong></td>
<td>1.620%</td>
</tr>
<tr>
<td><strong>z</strong></td>
<td>0.074%</td>
<td><strong>z</strong></td>
<td>0.037%</td>
</tr>
</tbody></table>
<p>英文的字母频率排列顺序:  <strong>ETAON RISHD LFCMU GYPWB VKJXQ Z</strong></p>
<h1 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法"></a>对称加密算法</h1><h2 id="Feistel网络"><a href="#Feistel网络" class="headerlink" title="Feistel网络"></a>Feistel网络</h2><h3 id="加密流程图"><a href="#加密流程图" class="headerlink" title="加密流程图"></a>加密流程图</h3><p><img src="/2021/10/27/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/image-20211027234924409.png" alt="image-20211027234924409"></p>
<h3 id="解密流程图"><a href="#解密流程图" class="headerlink" title="解密流程图"></a>解密流程图</h3><p><img src="/2021/10/27/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/image-20211027235003431.png" alt="image-20211027235003431"></p>
<h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><p>加密轮数可以任意增加</p>
<p>加密是无论使用任何函数作为论函数都可以正确解密</p>
<p>加密和解密可以用完全相同的结构来实现</p>
<h2 id="三重DES"><a href="#三重DES" class="headerlink" title="三重DES"></a>三重DES</h2><p>大意上就是说为了增加DES的强度，将DES重复三次得到的密码算法</p>
<h3 id="加密流程图-1"><a href="#加密流程图-1" class="headerlink" title="加密流程图"></a>加密流程图</h3><p><img src="/2021/10/27/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/image-20211028000204815.png" alt="image-20211028000204815"></p>
<h3 id="密钥名称"><a href="#密钥名称" class="headerlink" title="密钥名称"></a>密钥名称</h3><p>三重DES的密钥长度为56 * 3 = 168比特</p>
<p>特别的，当所有密钥都是用相同的比特序列，其等价于普通的DES</p>
<p>如果密钥1和密钥3使用相同的密钥加密，而密钥2使用不同的密钥解密，这种三重DES被称为DES-EDE2</p>
<p>如果密钥1、密钥2、密钥3全部使用不同的比特序列的三重DES成为DES-EDE3</p>
<h3 id="解密流程图-1"><a href="#解密流程图-1" class="headerlink" title="解密流程图"></a>解密流程图</h3><p>密钥3、密钥2、密钥1执行解密、加密、解密过程</p>
<p><img src="/2021/10/27/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/image-20211028000943702.png" alt="image-20211028000943702"></p>
<h2 id="AES算法"><a href="#AES算法" class="headerlink" title="AES算法"></a>AES算法</h2><h3 id="加密流程"><a href="#加密流程" class="headerlink" title="加密流程"></a>加密流程</h3><p><img src="/2021/10/27/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/image-20211028002021376.png" alt="image-20211028002021376"></p>
<h3 id="解密流程"><a href="#解密流程" class="headerlink" title="解密流程"></a>解密流程</h3><p><img src="/2021/10/27/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/image-20211028002051472.png" alt="image-20211028002051472"></p>
<h2 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h2><p>被称为对称密码的原因是加密的密钥和解密的密钥是相等的</p>
<p>对称密码长度达到512比特时，再继续增加密钥长度对于提高机密性已经没有什么实际作用了，只会让算法的速度变慢。</p>
<p>AES标准所选定的密码算法叫做Rijndael</p>
<p>当密钥长度为56比特时，平均尝试次数为2的55次方，大约相当于3.6E16</p>
<h1 id="分组密码"><a href="#分组密码" class="headerlink" title="分组密码"></a>分组密码</h1><h2 id="分组密码的模式"><a href="#分组密码的模式" class="headerlink" title="分组密码的模式"></a>分组密码的模式</h2><p><img src="/2021/10/27/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/image-20211028003309371.png" alt="image-20211028003309371"></p>
<h2 id="ECB模式"><a href="#ECB模式" class="headerlink" title="ECB模式"></a>ECB模式</h2><p>由于明文分组和密文分组是一一对应的关系，且各自独立地进行加密和解密</p>
<p>攻击者可以调换密文分组的顺序，即无需破译密码就能操纵明文（实现对明文的替换、复制和删除）</p>
<h2 id="CBC模式"><a href="#CBC模式" class="headerlink" title="CBC模式"></a>CBC模式</h2><h3 id="加密流程图-2"><a href="#加密流程图-2" class="headerlink" title="加密流程图"></a>加密流程图</h3><p><img src="/2021/10/27/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/image-20211028003921094.png" alt="image-20211028003921094"></p>
<h3 id="解密流程图-2"><a href="#解密流程图-2" class="headerlink" title="解密流程图"></a>解密流程图</h3><p><img src="/2021/10/27/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/image-20211028003940442.png" alt="image-20211028003940442"></p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p><img src="/2021/10/27/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/image-20211028221904204.png" alt="image-20211028221904204"></p>
<p>如果密文分组中存在损坏的比特，仅仅会影响两个分组的密文</p>
<p>但是如果出现缺失或多余的情况，则后面的全部明文分组都会损坏</p>
<h2 id="CFB模式"><a href="#CFB模式" class="headerlink" title="CFB模式"></a>CFB模式</h2><h3 id="加密流程-1"><a href="#加密流程-1" class="headerlink" title="加密流程"></a>加密流程</h3><p><img src="/2021/10/27/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/image-20211029010250075.png" alt="image-20211029010250075"></p>
<h2 id="解密流程-1"><a href="#解密流程-1" class="headerlink" title="解密流程"></a>解密流程</h2><p><img src="/2021/10/27/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/image-20211029010311270.png" alt="image-20211029010311270"></p>
<h2 id="攻击类型：重放攻击"><a href="#攻击类型：重放攻击" class="headerlink" title="攻击类型：重放攻击"></a>攻击类型：重放攻击</h2><p>由于密文与明文之间没有经过加密函数，而是仅仅参与了XOR计算，所以如果连续两次获取了密文，那么可以对相同位置进行置换，其中仅仅会使一组数据出错，而其后面剩余的将会被顶替成之前的明文。</p>
<p><img src="/2021/10/27/%E5%9B%BE%E8%A7%A3%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/image-20211029011242175.png" alt="image-20211029011242175"></p>
]]></content>
      <tags>
        <tag>crypto</tag>
      </tags>
  </entry>
  <entry>
    <title>长安杯2020例题笔记</title>
    <url>/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="SHA256相关："><a href="#SHA256相关：" class="headerlink" title="SHA256相关："></a>SHA256相关：</h1><h2 id="计算原始磁盘或镜像的SHA256值"><a href="#计算原始磁盘或镜像的SHA256值" class="headerlink" title="计算原始磁盘或镜像的SHA256值"></a>计算原始磁盘或镜像的SHA256值</h2><h3 id="对应例题："><a href="#对应例题：" class="headerlink" title="对应例题："></a>对应例题：</h3><p>10、检材 2 的原始磁盘 SHA256 值为（）</p>
<p>30、检材 3 的原始磁盘 SHA256 值为（）</p>
<p>42、检材 4 的原始磁盘 SHA256 值为（）</p>
<p>2019长安杯    1、计算“检材 1.E01”镜像的 SHA256 值是多少（ ）</p>
<h3 id="解题方法："><a href="#解题方法：" class="headerlink" title="解题方法："></a>解题方法：</h3><p>FMP -&gt; 证据文件 -&gt; 点击你所需要计算的磁盘并使其变蓝 -&gt; 右键哈希值计算</p>
<h2 id="计算文件的SHA256值"><a href="#计算文件的SHA256值" class="headerlink" title="计算文件的SHA256值"></a>计算文件的SHA256值</h2><h3 id="对应例题：-1"><a href="#对应例题：-1" class="headerlink" title="对应例题："></a>对应例题：</h3><p>2019长安杯    59、计算“检材 4.E01”文件的 sha256 值（ ）</p>
<h3 id="题解方法："><a href="#题解方法：" class="headerlink" title="题解方法："></a>题解方法：</h3><p>出题方给我们检材的时候同时会给出一个txt文件，里面记录着各个检材文件的sha256值，一般直接将其作为答案</p>
<p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211022163219449.png" alt="image-20211022163219449"></p>
<h3 id="检验方法："><a href="#检验方法：" class="headerlink" title="检验方法："></a>检验方法：</h3><h5 id="为了保证出题方所给的材料没有损坏，可以在windows自带的PowerShell中输入"><a href="#为了保证出题方所给的材料没有损坏，可以在windows自带的PowerShell中输入" class="headerlink" title="为了保证出题方所给的材料没有损坏，可以在windows自带的PowerShell中输入"></a>为了保证出题方所给的材料没有损坏，可以在windows自带的PowerShell中输入</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Get-FileHash 文件路径 -Algorithm 校验的Hash值类型| Format-List</span><br></pre></td></tr></table></figure>

<p>如果不带-Algorithm参数，也就是不指明验证的Hash值类型，那么默认验证的就是SHA256值。</p>
<h1 id="操作系统方面"><a href="#操作系统方面" class="headerlink" title="操作系统方面"></a>操作系统方面</h1><h2 id="系统版本和内核版本"><a href="#系统版本和内核版本" class="headerlink" title="系统版本和内核版本"></a>系统版本和内核版本</h2><h3 id="对应例题：-2"><a href="#对应例题：-2" class="headerlink" title="对应例题："></a>对应例题：</h3><p>1、检材 1 的操作系统版本是（）</p>
<p>31、检材 3 所在的计算机的操作系统版本是（）</p>
<p>2、检材 1 中，操作系统的内核版本是（）</p>
<p>11、检材 2 所在计算机的 OS 内部版本号是（）</p>
<h3 id="linux系统解题方法："><a href="#linux系统解题方法：" class="headerlink" title="linux系统解题方法："></a>linux系统解题方法：</h3><p>使用火眼仿真系统，进入操作系统即可看到系统版本和内核版本（账号设置为root，密码自动调整为123456，可以完成登录）</p>
<p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211022170603576.png" alt="image-20211022170603576"></p>
<p>第二行为内核版本，只需要输入    <strong>3.10.0</strong>    即可</p>
<h5 id="在终端输入-cat-proc-version"><a href="#在终端输入-cat-proc-version" class="headerlink" title="在终端输入 cat /proc/version"></a>在终端输入 <code>cat /proc/version</code></h5><p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211022170931078.png" alt="image-20211022170931078"></p>
<h5 id="在终端输入-uname-a"><a href="#在终端输入-uname-a" class="headerlink" title="在终端输入 uname -a"></a>在终端输入 <code>uname -a</code></h5><p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211022171017953.png" alt="image-20211022171017953"></p>
<p>均可得到内核版本，其中的时间为系统版本发布时间</p>
<h5 id="在终端输入-cat-etc-redhat-release-，这种方法只适合Redhat系的Linux"><a href="#在终端输入-cat-etc-redhat-release-，这种方法只适合Redhat系的Linux" class="headerlink" title="在终端输入    cat /etc/redhat-release    ，这种方法只适合Redhat系的Linux"></a>在终端输入    <code>cat /etc/redhat-release</code>    ，这种方法只适合Redhat系的Linux</h5><p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211022171538770.png" alt="image-20211022171538770"></p>
<h3 id="windows系统题解方法："><a href="#windows系统题解方法：" class="headerlink" title="windows系统题解方法："></a>windows系统题解方法：</h3><p>使用美亚取证大师，取证结果 -&gt; 系统痕迹 -&gt; 系统信息 -&gt; 产品名称</p>
<p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211022172043461.png" alt="image-20211022172043461"></p>
<p>可以直接获得系统版本的名称</p>
<p>但是当前build无法直接作为系统OS版本的答案，内容不全，需要进入火眼仿真中查看</p>
<p>开始 -&gt; 设置 -&gt;关于 ，可以找到操作系统版本</p>
<p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211022172740597.png" alt="image-20211022172740597"></p>
<h2 id="计算机开关机时间"><a href="#计算机开关机时间" class="headerlink" title="计算机开关机时间"></a>计算机开关机时间</h2><h3 id="对应例题"><a href="#对应例题" class="headerlink" title="对应例题"></a>对应例题</h3><p>12、检材 2 所在计算机最后一次正常关机的时间为（）</p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>最简单的办法， 取证大师 -&gt; 案件概览 -&gt; 最后一次正常关机时间</p>
<p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211022201502698.png" alt="image-20211022201502698"></p>
<h2 id="程序安装时间"><a href="#程序安装时间" class="headerlink" title="程序安装时间"></a>程序安装时间</h2><h3 id="对应例题-1"><a href="#对应例题-1" class="headerlink" title="对应例题"></a>对应例题</h3><p>13、检材 2 中，VMware 程序的安装时间为（）</p>
<h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>取证大师 -&gt; 取证结果 -&gt; 系统痕迹 -&gt; 安装软件 -&gt; 虚拟机软件 -&gt; 安装时间 </p>
<p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211022201320946.png" alt="image-20211022201320946"></p>
<h2 id="程序启动次数"><a href="#程序启动次数" class="headerlink" title="程序启动次数"></a>程序启动次数</h2><h3 id="对应例题-2"><a href="#对应例题-2" class="headerlink" title="对应例题"></a>对应例题</h3><p>14、检材 2 中，Vmware.exe 程序总计启动过（）</p>
<h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>取证大师 -&gt; 取证结果 -&gt; 系统痕迹 -&gt; 应用程序运行痕迹 -&gt; VMWARE.EXE -&gt; 第六次运行时间，可知程序总共运行了6次</p>
<p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211022202227731.png" alt="image-20211022202227731"></p>
<h1 id="磁盘逻辑卷方面"><a href="#磁盘逻辑卷方面" class="headerlink" title="磁盘逻辑卷方面"></a>磁盘逻辑卷方面</h1><h2 id="逻辑区块地址（仅对于此问题用火眼较好）："><a href="#逻辑区块地址（仅对于此问题用火眼较好）：" class="headerlink" title="逻辑区块地址（仅对于此问题用火眼较好）："></a>逻辑区块地址（仅对于此问题用火眼较好）：</h2><h3 id="对应例题：-3"><a href="#对应例题：-3" class="headerlink" title="对应例题："></a>对应例题：</h3><p>3、检材 1 中磁盘包含一个 LVM 逻辑卷，该 LVM 开始的逻辑区块地址（LBA）是（）</p>
<h3 id="解题方法：-1"><a href="#解题方法：-1" class="headerlink" title="解题方法："></a>解题方法：</h3><h4 id="弘联火眼："><a href="#弘联火眼：" class="headerlink" title="弘联火眼："></a>弘联火眼：</h4><h5 id="在终端上输入-fdisk-l得到关于磁盘的信息，start即为逻辑区块地址"><a href="#在终端上输入-fdisk-l得到关于磁盘的信息，start即为逻辑区块地址" class="headerlink" title="在终端上输入 fdisk -l得到关于磁盘的信息，start即为逻辑区块地址"></a>在终端上输入 <code>fdisk -l</code>得到关于磁盘的信息，start即为逻辑区块地址</h5><p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211022184301739.png" alt="image-20211022184301739"></p>
<h5 id="在终端上输入-lvdisplay可以获得逻辑卷的详情信息"><a href="#在终端上输入-lvdisplay可以获得逻辑卷的详情信息" class="headerlink" title="在终端上输入 lvdisplay可以获得逻辑卷的详情信息"></a>在终端上输入 <code>lvdisplay</code>可以获得逻辑卷的详情信息</h5><p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211022184533882.png" alt="image-20211022184533882"></p>
<h4 id="美亚取证："><a href="#美亚取证：" class="headerlink" title="美亚取证："></a>美亚取证：</h4><p>找到对应磁盘的检材，查看摘要</p>
<p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211022184825104.png" alt="image-20211022184825104"></p>
<p>但是这个内存物理地址的单位是字节<code>（Byte）</code>，而一个逻辑区块占用512位，所以要将这个值除以512。    <code>1074790400/512=2099200</code></p>
<h1 id="docker相关"><a href="#docker相关" class="headerlink" title="docker相关"></a>docker相关</h1><h2 id="启动相关"><a href="#启动相关" class="headerlink" title="启动相关"></a>启动相关</h2><p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211022185911875.png" alt="image-20211022185911875"></p>
<p>使用docker相关命令时，会遇到报错，原因时docker服务尚未启动</p>
<h2 id="docker相关指令（详情见长安杯2019题解）"><a href="#docker相关指令（详情见长安杯2019题解）" class="headerlink" title="docker相关指令（详情见长安杯2019题解）"></a>docker相关指令（详情见长安杯2019题解）</h2><h5 id="在终端输入-service-docker-start即可启动docker，其他命令正常使用"><a href="#在终端输入-service-docker-start即可启动docker，其他命令正常使用" class="headerlink" title="在终端输入 service docker start即可启动docker，其他命令正常使用"></a>在终端输入 <code>service docker start</code>即可启动docker，其他命令正常使用</h5><h5 id="输入-docker-version-可以获得版本信息"><a href="#输入-docker-version-可以获得版本信息" class="headerlink" title="输入 docker version 可以获得版本信息"></a>输入 <code>docker version</code> 可以获得版本信息</h5><h5 id="输入-docker-images-查看本地所有的镜像"><a href="#输入-docker-images-查看本地所有的镜像" class="headerlink" title="输入 docker images 查看本地所有的镜像"></a>输入 <code>docker images</code> 查看本地所有的镜像</h5><h5 id="docker-ps-显示正在运行中的容器节点"><a href="#docker-ps-显示正在运行中的容器节点" class="headerlink" title="docker ps 显示正在运行中的容器节点"></a><code>docker ps</code> 显示正在运行中的容器节点</h5><h5 id="docker-ps-a-显示所有的容器节点"><a href="#docker-ps-a-显示所有的容器节点" class="headerlink" title="docker ps -a 显示所有的容器节点"></a><code>docker ps -a</code> 显示所有的容器节点</h5><h5 id="输入-docker-info-可以看到关于docker配置的相关信息"><a href="#输入-docker-info-可以看到关于docker配置的相关信息" class="headerlink" title="输入 docker info 可以看到关于docker配置的相关信息"></a>输入 <code>docker info</code> 可以看到关于docker配置的相关信息</h5><h5 id="输入docker-inspect-容器ID-可以查看该容器的详情信息"><a href="#输入docker-inspect-容器ID-可以查看该容器的详情信息" class="headerlink" title="输入docker inspect [容器ID] 可以查看该容器的详情信息"></a>输入<code>docker inspect [容器ID]</code> 可以查看该容器的详情信息</h5><h5 id="输入-stat-文件名-可以查看文件时间状态"><a href="#输入-stat-文件名-可以查看文件时间状态" class="headerlink" title="输入 stat [文件名] 可以查看文件时间状态"></a>输入 <code>stat [文件名]</code> 可以查看文件时间状态</h5><h5 id="输入-more-bash-history-查看历史操作记录"><a href="#输入-more-bash-history-查看历史操作记录" class="headerlink" title="输入 more .bash_history 查看历史操作记录"></a>输入 <code>more .bash_history</code> 查看历史操作记录</h5><h4 id="可以输入-docker-exec-it-容器ID前两位即可-bin-bash-，-查找相关文件的容器内部路径"><a href="#可以输入-docker-exec-it-容器ID前两位即可-bin-bash-，-查找相关文件的容器内部路径" class="headerlink" title="可以输入 docker exec -it [容器ID前两位即可] /bin/bash ， 查找相关文件的容器内部路径"></a>可以输入 docker exec -it [容器ID前两位即可] /bin/bash ， 查找相关文件的容器内部路径</h4><h4 id="输入-find-name-名字-可以搜索所需要的配置文件（-conf结尾）或-日志文件（-log结尾）"><a href="#输入-find-name-名字-可以搜索所需要的配置文件（-conf结尾）或-日志文件（-log结尾）" class="headerlink" title="输入 find / -name [名字] 可以搜索所需要的配置文件（.conf结尾）或 日志文件（.log结尾）"></a>输入 <code>find / -name [名字]</code> 可以搜索所需要的配置文件（.conf结尾）或 日志文件（.log结尾）</h4><h1 id="服务器相关思路"><a href="#服务器相关思路" class="headerlink" title="服务器相关思路"></a>服务器相关思路</h1><h2 id="访问流程"><a href="#访问流程" class="headerlink" title="访问流程"></a>访问流程</h2><h3 id="嫌疑人-gt-检材服务器-gt-内部容器-gt-web网页"><a href="#嫌疑人-gt-检材服务器-gt-内部容器-gt-web网页" class="headerlink" title="嫌疑人 -&gt; 检材服务器 -&gt; 内部容器 -&gt; web网页"></a>嫌疑人 -&gt; 检材服务器 -&gt; 内部容器 -&gt; web网页</h3><h2 id="一般使用工具"><a href="#一般使用工具" class="headerlink" title="一般使用工具"></a>一般使用工具</h2><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><p>通过查看nginx的相关文件获得题目所需信息</p>
<p>配置文件：大概目录 <code>/etc/nginx/conf.d/</code></p>
<p>日志文件：大概目录 <code>/var/log/nginx/access.log</code></p>
<h2 id="网站对应web对外开放端口"><a href="#网站对应web对外开放端口" class="headerlink" title="网站对应web对外开放端口"></a>网站对应web对外开放端口</h2><h3 id="对应例题：-4"><a href="#对应例题：-4" class="headerlink" title="对应例题："></a>对应例题：</h3><p>4、检材 1 中网站“<a href="http://www.kkzjc.com”对应的/">www.kkzjc.com”对应的</a> Web 服务对外开放的端口是（）</p>
<h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><p>直接在取证大师中搜索<a href="http://www.kkzjc.com,得到txt文本.找到开放端口/">www.kkzjc.com，得到txt文本。找到开放端口</a></p>
<p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211022192049614.png" alt="image-20211022192049614"></p>
<h2 id="服务器对外开放域名"><a href="#服务器对外开放域名" class="headerlink" title="服务器对外开放域名"></a>服务器对外开放域名</h2><h3 id="对应例题：-5"><a href="#对应例题：-5" class="headerlink" title="对应例题："></a>对应例题：</h3><p>5、 检材 1 所在的服务器共绑定了（）个对外开放的域名</p>
<h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><p>由于题目的连贯性，上题对应的网址应也视作域名，在其文本目录下发现其他三个域名的文本文档，故域名数为3</p>
<h2 id="远程登陆检材所在服务器"><a href="#远程登陆检材所在服务器" class="headerlink" title="远程登陆检材所在服务器"></a>远程登陆检材所在服务器</h2><h3 id="对应例题：-6"><a href="#对应例题：-6" class="headerlink" title="对应例题："></a>对应例题：</h3><p>7、嫌疑人曾经远程登录过检材 1 所在的服务器，分析并找出其登录使用的 IP 地址是（）</p>
<p>6、检材 1 所在的服务器的原始 IP 地址是（）</p>
<p>9、嫌疑人曾经从题 7 的 IP 地址，通过 WEB 方式远程访问过网站，统计出检材 1 中该 IP 出现的次数为（）</p>
<h3 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h3><h5 id="在终端上输入-last-可以显示近期用户或终端的登录情况"><a href="#在终端上输入-last-可以显示近期用户或终端的登录情况" class="headerlink" title="在终端上输入 last ,可以显示近期用户或终端的登录情况"></a>在终端上输入 <code>last</code> ,可以显示近期用户或终端的登录情况</h5><p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211022192944701.png" alt="image-20211022192944701"></p>
<p>可以获取嫌疑人的登陆使用的ip地址</p>
<h5 id="在终端上输入-docker-logs-容器ID-，可以获得服务器与容器联系的相关信息"><a href="#在终端上输入-docker-logs-容器ID-，可以获得服务器与容器联系的相关信息" class="headerlink" title="在终端上输入 docker logs [容器ID]，可以获得服务器与容器联系的相关信息"></a>在终端上输入 <code>docker logs [容器ID]</code>，可以获得服务器与容器联系的相关信息</h5><p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211022194258171.png" alt="image-20211022194258171"></p>
<p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211022194024673.png" alt="image-20211022194024673"></p>
<p>在其中可以找到两个IP地址   大意为 192.168.99.222（嫌疑人IP）访问了192.168.99.3（服务器的原始IP地址）:8091（端口）</p>
<h5 id="由于这上面显示的信息太多，在终端输入docker-logs-08-grep-192-168-99-222-wc-l-。得到答案"><a href="#由于这上面显示的信息太多，在终端输入docker-logs-08-grep-192-168-99-222-wc-l-。得到答案" class="headerlink" title="由于这上面显示的信息太多，在终端输入docker logs 08 | grep 192.168.99.222 | wc -l 。得到答案"></a>由于这上面显示的信息太多，在终端输入<code>docker logs 08 | grep 192.168.99.222 | wc -l</code> 。得到答案</h5><h2 id="反向代理转发后台网络的IP地址"><a href="#反向代理转发后台网络的IP地址" class="headerlink" title="反向代理转发后台网络的IP地址"></a>反向代理转发后台网络的IP地址</h2><h3 id="对应例题：-7"><a href="#对应例题：-7" class="headerlink" title="对应例题："></a>对应例题：</h3><p>8、检材 1 所在的服务器，其主要功能之一为反向代理。找出“<a href="http://www.kkzjc.com”转发的后台网站所使用的/">www.kkzjc.com”转发的后台网站所使用的</a> IP 地址是（）</p>
<h3 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h3><p>进入docker容器，找到nginx的配置文件，查看得到ip地址</p>
<p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211022193517236.png" alt="image-20211022193517236"></p>
<h1 id="浏览器历史记录"><a href="#浏览器历史记录" class="headerlink" title="浏览器历史记录"></a>浏览器历史记录</h1><h2 id="访问服务器网站"><a href="#访问服务器网站" class="headerlink" title="访问服务器网站"></a>访问服务器网站</h2><h3 id="对应例题-3"><a href="#对应例题-3" class="headerlink" title="对应例题"></a>对应例题</h3><p>15、嫌疑人通过 Web 方式，从检材 2 访问检材 1 所在的服务器上的网站时，连接的目 标端口是（）</p>
<p>17、嫌疑人从检材 2 上访问该网站时，所使用的域名为（）</p>
<h3 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h3><p>取证大师 -&gt; 上网记录</p>
<p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211022203336124.png" alt="image-20211022203336124"></p>
<p>域名填写答案 <code>www.sdhj.com</code>即可</p>
<h1 id="手机取证"><a href="#手机取证" class="headerlink" title="手机取证"></a>手机取证</h1><h2 id="寻找手机备份文件，用火眼手机证据分析软件分析"><a href="#寻找手机备份文件，用火眼手机证据分析软件分析" class="headerlink" title="寻找手机备份文件，用火眼手机证据分析软件分析"></a>寻找手机备份文件，用火眼手机证据分析软件分析</h2><p>一般该类备份文件被置于最显眼的地方，文件名设置为手机操作系统+日期的组合，如apple_20200920，便于寻找，</p>
<h2 id="嫌疑人常用软件"><a href="#嫌疑人常用软件" class="headerlink" title="嫌疑人常用软件"></a>嫌疑人常用软件</h2><p>微信、QQ都可以看一看，说不定有意想不到的收获</p>
<h3 id="例题分析"><a href="#例题分析" class="headerlink" title="例题分析"></a>例题分析</h3><p>18、检材 2 中，嫌疑人所使用的微信 ID 是（）</p>
<p>19、分析检材 2，嫌疑人为推广其网站，与广告位供应商沟通时使用的通联工具的名称 为（</p>
<p>20、分析检材 2，嫌疑人使用虚拟货币与供应商进行交易，该虚拟货币的名称是（）</p>
<p>21、上述交易中，对方的收款地址是（）</p>
<p>比较简单就不写解题思路了（懒）</p>
<h1 id="虚拟机的密码"><a href="#虚拟机的密码" class="headerlink" title="虚拟机的密码"></a>虚拟机的密码</h1><h2 id="对应例题-4"><a href="#对应例题-4" class="headerlink" title="对应例题"></a>对应例题</h2><p>24、检材 2 中，嫌疑人使用的虚拟机的虚拟磁盘被加密，其密码为（）</p>
<h2 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h2><h3 id="导出虚拟机相关文件"><a href="#导出虚拟机相关文件" class="headerlink" title="导出虚拟机相关文件"></a>导出虚拟机相关文件</h3><p>导出后缀名为vmx(爆破主要对此文件进行，为虚拟机的配置文件)，vmdk(虚拟机的快照库，为主要文件)</p>
<h3 id="密码爆破"><a href="#密码爆破" class="headerlink" title="密码爆破"></a>密码爆破</h3><p><a href="https://github.com/axcheron/pyvmx-cracker">https://github.com/axcheron/pyvmx-cracker</a></p>
<p>进入上述链接下载代码 pyvmx-cracker.py</p>
<p>复制虚拟机的 .vmx 文件进入,改名为 1.vmx —(方便打字,可不做)</p>
<p><code>python .\pyvmx-cracker.py -v 1.vmx -d wordlist.txt</code></p>
<p>即可爆破出密码</p>
<h3 id="密码消除"><a href="#密码消除" class="headerlink" title="密码消除"></a>密码消除</h3><p>用Vmware打开该配置文件，点击编辑虚拟机设置，选到选项，访问控制里点击移除加密</p>
<h3 id="剩下的就可以交给取证大师和火眼仿真啦"><a href="#剩下的就可以交给取证大师和火眼仿真啦" class="headerlink" title="剩下的就可以交给取证大师和火眼仿真啦"></a>剩下的就可以交给取证大师和火眼仿真啦</h3><h1 id="程序使用方面"><a href="#程序使用方面" class="headerlink" title="程序使用方面"></a>程序使用方面</h1><h2 id="邮件"><a href="#邮件" class="headerlink" title="邮件"></a>邮件</h2><h3 id="对应例题-5"><a href="#对应例题-5" class="headerlink" title="对应例题"></a>对应例题</h3><p>25、检材 2 中，嫌疑人发送给广告商的邮件中的图片附件的 SHA256 值为（）；（忽略 邮件状态） （答案格式：“abcdefg” 小写字母</p>
<p>26、检材 2 中，嫌疑人给广告商发送广告图片邮件的发送时间是（）（忽略邮件状态） （答案格式：“2020-01-01 21:35” 精确到分钟，半角符号</p>
<p>27、检材 2 中，嫌疑人的邮箱密码是（） （答案格式：“abcde123456” 字母符号数字组合，区分大小写）</p>
<h3 id="解题思路-8"><a href="#解题思路-8" class="headerlink" title="解题思路"></a>解题思路</h3><p>取证大师分析虚拟机镜像，即可得到附件，账号密码等</p>
<p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211022220406786.png" alt="image-20211022220406786"></p>
<h1 id="网站重构"><a href="#网站重构" class="headerlink" title="网站重构"></a>网站重构</h1><h2 id="系统登陆问题"><a href="#系统登陆问题" class="headerlink" title="系统登陆问题"></a>系统登陆问题</h2><p>我在做题的时候对检材三使用火眼仿真创建虚拟机失败，但得知Administrator账户为空密码，故转用Vm虚拟机打开，使用空密码登陆时要求用户重设密码，但多次设置均显示密码强度不够，一番尝试后发现 <code>./123ASD</code>  可以，并成功登录系统。</p>
<h2 id="找到部署的网站信息"><a href="#找到部署的网站信息" class="headerlink" title="找到部署的网站信息"></a>找到部署的网站信息</h2><h3 id="对应例题-6"><a href="#对应例题-6" class="headerlink" title="对应例题"></a>对应例题</h3><p>32、检材 3 中，部署的网站名称是（）</p>
<p>33、检材 3 中，部署的网站对应的网站根目录是（）</p>
<p>34、检材 3 中，部署的网站绑定的端口是（）</p>
<p>35、检材 3 中，具备登陆功能的代码页，对应的文件名为（）</p>
<p>36、检材 3 中，请对网站代码进行分析，网站登录过程中，代码中对输入的明文密码 作了追加（）字符串处理 </p>
<p>37、检材 3 中，请对网站代码进行分析，网站登录过程中，代码中调用的动态扩展库 文件的完整名称为（）</p>
<p>38、检材 3 中，网站登录过程中，后台接收到明文密码后进行加密处理，首先使用的 算法是 Encryption 中的（）函数</p>
<p>39、检材 3 中，分析该网站连接的数据库地址为（）</p>
<p>40、检材 3 中，网站连接数据库使用的密码为（）（不会！！！！！）</p>
<p>41、检材 3 中，网站连接数据库服务器的端口是（）</p>
<h3 id="解题思路-9"><a href="#解题思路-9" class="headerlink" title="解题思路"></a>解题思路</h3><p>找到 开始 -&gt; 管理工具 -&gt; Internet 信息服务（IIS）管理器 打开</p>
<p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211023120842632.png" alt="image-20211023120842632"></p>
<p>选中 网站 -&gt; card -&gt; 高级设置 里面可以查看 <strong>网站根目录</strong> 和 <strong>绑定的端口</strong> </p>
<p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211023121052964.png" alt="image-20211023121052964"></p>
<p>我们进入网站的根目录，下面找到网站的配置文件web.config ，打开后发现具备登录功能的代码页（login）</p>
<p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211023121520019.png" alt="image-20211023121520019"></p>
<p>打开后发现有行代码为 x.value+=’0v0’ 故可获得答案</p>
<p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211023121646330.png" alt="image-20211023121646330"></p>
<p>顺便找到了动态拓展库</p>
<p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211023122030821.png" alt="image-20211023122030821"></p>
<p>紧接上题，我们在根目录的 bin 文件夹打开上述的动态拓展库，</p>
<p>仅仅是文本打开，并且靠运气找到加密函数（我也不信）</p>
<p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211023123317933.png" alt="image-20211023123317933"></p>
<p>一开始想法局限于VM虚拟机，想着怎样把文件拖出来到计算机里分析，后来才意识到取证大师可以导出虚拟机内的文件。。。，之后用dotPeek分析即可</p>
<p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211023123923803.png" alt="image-20211023123923803"></p>
<p>我也不知道为什么一定是DBManager.dll ，但是的确从里面找到了</p>
<p>server=192.168.1.174、端口1433、uid=sa、pwd=31415926</p>
<p>（密码用加密函数加密后表示为BASE64编码，需要继续研究，就先不深究了）</p>
<p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211023124323866.png" alt="image-20211023124323866"></p>
<h2 id="part4-（摘自大佬的WP，冲不下去了哭）"><a href="#part4-（摘自大佬的WP，冲不下去了哭）" class="headerlink" title="part4 （摘自大佬的WP，冲不下去了哭）"></a>part4 （摘自大佬的WP，冲不下去了哭）</h2><blockquote>
<p>充满玄学的一部分</p>
<p>向天高呼保佑,有几率进入下一步</p>
</blockquote>
<h3 id="设置检材4的数据库"><a href="#设置检材4的数据库" class="headerlink" title="设置检材4的数据库"></a>设置检材4的数据库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 启动docker服务</span><br><span class="line">systemctl start docker</span><br><span class="line">// 列出所有在运行的容器信息</span><br><span class="line">docker ps // 没东西,说明没启动,需要自己启动一下</span><br><span class="line">// 显示所有的容器，包括未运行的</span><br><span class="line">docker ps -a</span><br><span class="line">// 启动docker里面的容器</span><br><span class="line">docker start 3f</span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201127125042696.png" alt="img/image-20201127125042696"></p>
<p>从<strong>part3</strong>连接数据库部分可以得知,我们的数据库ip是<code>192.168.1.174</code></p>
<p>所以关闭该虚拟机的DHCP服务</p>
<p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201127125519549.png" alt="img/image-20201127125519549"></p>
<p>编辑下述文件修改静态ip</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/sysconfig/network-scripts/ifcfg-eth数字</span><br></pre></td></tr></table></figure>

<p>修改/添加内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BOOTPROTO=&quot;static&quot; #dhcp改为static </span><br><span class="line">ONBOOT=&quot;yes&quot; #开机启用本配置</span><br><span class="line">IPADDR=192.168.1.174 #静态IP</span><br><span class="line">GATEWAY=192.168.1.1 #默认网关</span><br><span class="line">NETMASK=255.255.255.0 #子网掩码</span><br></pre></td></tr></table></figure>

<p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201127125931153.png" alt="img/image-20201127125931153"></p>
<p>重启网络服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure>

<p>这步失败了,改了好久都不能重启服务成功,干脆直接重启虚拟机了</p>
<p>结果意外好了&gt;&lt;</p>
<p>查看ip</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure>

<p>像下图这样就说明静态ip设置成功了</p>
<p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201127133110453.png" alt="img/image-20201127133110453"></p>
<h3 id="设置检材3的服务器"><a href="#设置检材3的服务器" class="headerlink" title="设置检材3的服务器"></a>设置检材3的服务器</h3><p>网络配置使其与检材4位于同一网段,开启DHCP服务,使其可以ping通</p>
<p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201127133622279.png" alt="img/image-20201127133622279"></p>
<p>网页进入<code>ip/dl</code>,即可看到重构的网页</p>
<p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201127140235443.png" alt="img/image-20201127140235443"></p>
<h3 id="主机"><a href="#主机" class="headerlink" title="主机"></a>主机</h3><ol>
<li><p>连接数据库</p>
<p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201127143808886.png" alt="img/image-20201127143808886"></p>
<p>从检材PC可知,嫌疑人使用的用户是 <strong>liwente1314520</strong></p>
</li>
</ol>
<ol start="2">
<li><p>在<strong>TD_User表</strong>中将其密码改为123456</p>
<ul>
<li><p>逆向dll时,可知存在数据库里的密码经过如下处理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">字符串拼接: &quot;密码&quot;+&quot;OvO&quot;</span><br><span class="line">加密: 使用DBManager.dll中的加密方法加密</span><br><span class="line">md5: 加密后计算md5值,并存入数据库</span><br></pre></td></tr></table></figure></li>
<li><p>下图进行拼接和加密</p>
<p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201127144737619.png" alt="img/image-20201127144737619"></p>
</li>
<li><p>下图md5计算</p>
<p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201127144814666.png" alt="img/image-20201127144814666"></p>
</li>
<li><p>下图修改表中的值</p>
<p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201127145245384.png" alt="img/image-20201127145245384"></p>
</li>
</ul>
</li>
</ol>
<ol start="3">
<li><p>将服务器现在的ip添加到<strong>TD_Webs</strong>中</p>
<p>同样是从dll逆向出来得知,执行登录操作时会检测域名</p>
<p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201127145103070.png" alt="img/image-20201127145103070"></p>
</li>
</ol>
<h3 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h3><ul>
<li><p>检材3</p>
<p>cmd–services.msc   (本地服务设置)</p>
<p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201127145625474.png" alt="img/image-20201127145625474"></p>
</li>
<li><p>检材4</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker restart 容器id</span><br></pre></td></tr></table></figure>

<p>然后就可以用 <strong>liwente1314520</strong> <strong>123456</strong> 登录网站了</p>
</li>
</ul>
<h3 id="42-的原始磁盘-SHA256"><a href="#42-的原始磁盘-SHA256" class="headerlink" title="42.的原始磁盘 SHA256"></a>42.的原始磁盘 SHA256</h3><p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201126195142183.png" alt="img/image-20201126195142183"></p>
<h3 id="43-嫌疑用户的推广链接中参数里包含的-ID-是"><a href="#43-嫌疑用户的推广链接中参数里包含的-ID-是" class="headerlink" title="43.嫌疑用户的推广链接中参数里包含的 ID 是"></a>43.嫌疑用户的推广链接中参数里包含的 ID 是</h3><p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201127151654651.png" alt="img/image-20201127151654651"></p>
<h3 id="44-该网站后台的代理用户数量"><a href="#44-该网站后台的代理用户数量" class="headerlink" title="44.该网站后台的代理用户数量"></a>44.该网站后台的代理用户数量</h3><p>统计一下个数即可</p>
<p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201127151811242.png" alt="img/image-20201127151811242"></p>
<h3 id="45-该网站注册用户中共有过几个代理"><a href="#45-该网站注册用户中共有过几个代理" class="headerlink" title="45.该网站注册用户中共有过几个代理"></a>45.该网站注册用户中共有过几个代理</h3><p>上题中的用户数是未删除的个数,注册过的也就包括了之前注册,但是删掉了的用户数</p>
<p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201127151905956.png" alt="img/image-20201127151905956"></p>
<h3 id="46-2019-年-10-月-1-日后补发成功的金额总值"><a href="#46-2019-年-10-月-1-日后补发成功的金额总值" class="headerlink" title="46.2019 年 10 月 1 日后补发成功的金额总值"></a>46.2019 年 10 月 1 日后补发成功的金额总值</h3><p>数量略多,需要导出,使用excel或其他软件处理计算</p>
<p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201127152103903.png" alt="img/image-20201127152103903"></p>
<h3 id="47-对“TX-IpLog”表进行分析，所有在“武汉市”登录的次数为"><a href="#47-对“TX-IpLog”表进行分析，所有在“武汉市”登录的次数为" class="headerlink" title="47.对“TX_IpLog”表进行分析，所有在“武汉市”登录的次数为"></a>47.对“TX_IpLog”表进行分析，所有在“武汉市”登录的次数为</h3><p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201127152253898.png" alt="img/image-20201127152253898"></p>
<h3 id="48-该嫌疑人下属代理“liyun10”账户下的余额有多少元"><a href="#48-该嫌疑人下属代理“liyun10”账户下的余额有多少元" class="headerlink" title="48.该嫌疑人下属代理“liyun10”账户下的余额有多少元"></a>48.该嫌疑人下属代理“liyun10”账户下的余额有多少元</h3><p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201127152510630.png" alt="img/image-20201127152510630"></p>
<p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201127152550329.png" alt="img/image-20201127152550329"></p>
<p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201127152634952.png" alt="img/image-20201127152634952"></p>
<h3 id="49-接上题-该用户的推广-ID-是"><a href="#49-接上题-该用户的推广-ID-是" class="headerlink" title="49.接上题,该用户的推广 ID 是"></a>49.接上题,该用户的推广 ID 是</h3><p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201127152724022.png" alt="img/image-20201127152724022"></p>
<h3 id="50-接上题，该代理商户的最后一次登陆时间是"><a href="#50-接上题，该代理商户的最后一次登陆时间是" class="headerlink" title="50.接上题，该代理商户的最后一次登陆时间是"></a>50.接上题，该代理商户的最后一次登陆时间是</h3><p><img src="/2021/10/18/%E9%95%BF%E5%AE%89%E6%9D%AF2020%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201127152827440.png" alt="img/image-20201127152827440"></p>
<h1 id="疑难杂症"><a href="#疑难杂症" class="headerlink" title="疑难杂症"></a>疑难杂症</h1><p>16、接 15 题，该端口上运行的进程的程序名称（Program name）为（） （答案格式：“avahi-deamon” 字母和半角符号组合）</p>
<p>22、上述交易中，嫌疑人和供应商的交易时间是（） （答案格式：“2020-01-01 21:35:54” 精确到秒，半角符号</p>
<p>23、上述交易中，嫌疑人支付货币的数量为（） （答案格式：“8888” 纯数字</p>
<p>28、检材 2 中，嫌疑人使用了（）远程管理工具，登录了检材 1 所在的服务</p>
<p>29、检材 2 中，嫌疑人使用上述工具连接服务器时，使用的登录密码为（） （答案格式：“aBcd#123”</p>
]]></content>
      <tags>
        <tag>电子数据取证</tag>
      </tags>
  </entry>
  <entry>
    <title>长安杯2019例题笔记</title>
    <url>/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="2019长安杯Wp"><a href="#2019长安杯Wp" class="headerlink" title="2019长安杯Wp"></a>2019长安杯Wp</h1><h2 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h2><h3 id="SHA256的计算"><a href="#SHA256的计算" class="headerlink" title="SHA256的计算"></a>SHA256的计算</h3><p><code>在windows自带的PowerShell中输入</code><em><strong>（误！！！）</strong></em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Get-FileHash 文件路径 -Algorithm 校验的Hash值类型| Format-List</span><br></pre></td></tr></table></figure>

<p>如果不带-Algorithm参数，也就是不指明验证的Hash值类型，那么默认验证的就是SHA256值。</p>
<h4 id="正确方法："><a href="#正确方法：" class="headerlink" title="正确方法："></a>正确方法：</h4><p>右键证据文件里的检材，选择哈希值计算</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211015231422448.png" alt="image-20211015231422448"></p>
<p>得到文件的SHA-256值</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211015231650138.png" alt="image-20211015231650138"></p>
<blockquote>
<p>1、计算“检材 1.E01”镜像的 SHA256 值是多少（ C ）</p>
<p>A. 2b20022249e3e5d66d4bbed34ad337be5dd77b313c92dfe929aa56ed71449697</p>
<p>B. 6a574c40548110598bd4c88520d34b37d13b372066737ede3104743f986b7263</p>
<p>C. 5ee0b3809807bf8a39453695c5835cddfd33f65b4f5bee8b5670625291a6bc1c</p>
<p>D. 8495b678da27c64b54f083afefbcf9f83f94c1de133c70c175b4a784551939dd</p>
</blockquote>
<h3 id="服务器内核版本？"><a href="#服务器内核版本？" class="headerlink" title="服务器内核版本？"></a>服务器内核版本？</h3><h5 id="1：登录linux，在终端输入-cat-proc-version"><a href="#1：登录linux，在终端输入-cat-proc-version" class="headerlink" title="1：登录linux，在终端输入 cat /proc/version"></a>1：登录linux，在终端输入 <code>cat /proc/version</code></h5><p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211013191208084.png" alt="image-20211013191208084"></p>
<h5 id="2：登录linux，在终端输入-uname-a"><a href="#2：登录linux，在终端输入-uname-a" class="headerlink" title="2：登录linux，在终端输入 uname -a"></a>2：登录linux，在终端输入 <code>uname -a</code></h5><p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211013191001450.png" alt="image-20211013191001450"></p>
<h5 id="3：最省事的就是刚开机的时候会显示出来（doge）"><a href="#3：最省事的就是刚开机的时候会显示出来（doge）" class="headerlink" title="3：最省事的就是刚开机的时候会显示出来（doge）"></a>3：最省事的就是刚开机的时候会显示出来（doge）</h5><p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211016004637803.png" alt="image-20211016004637803"></p>
<p>4: FMP取证结果 -&gt; 展开镜像 -&gt; 选中对应的 root -&gt; 系统痕迹 -&gt; 系统信息 -&gt; 查看产品名称和当前版本</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211016004911374.png" alt="image-20211016004911374"></p>
<blockquote>
<p>2、该服务器的操作系统版本是什么（ D ） </p>
<p>A. CentOS release 6.5 (Final) </p>
<p>B. Ubuntu 16.04.3 LTS </p>
<p>C. Debian GNU/Linux 7.8 (wheezy) </p>
<p>D.CentOS Linux release 7.6.1810(Core) </p>
</blockquote>
<blockquote>
<p>3、该服务器内核版本是多少（ A ）</p>
<p>A.3.10.0-957.el7.x86_64 </p>
<p>B. 3.2.0-4-amd64 </p>
<p>C. 4.8.0-52-generic </p>
<p>D. 4.10.0-28-generic</p>
</blockquote>
<h3 id="硬盘分区？"><a href="#硬盘分区？" class="headerlink" title="硬盘分区？"></a>硬盘分区？</h3><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><h5 id="输入-fdisk-l-可以查看挂载那些硬盘分区，即可得到关于磁盘分区的详情信息"><a href="#输入-fdisk-l-可以查看挂载那些硬盘分区，即可得到关于磁盘分区的详情信息" class="headerlink" title="输入 fdisk -l 可以查看挂载那些硬盘分区，即可得到关于磁盘分区的详情信息"></a>输入 <code>fdisk -l</code> 可以查看挂载那些硬盘分区，即可得到关于磁盘分区的详情信息</h5><h5 id="输入-lvdisplay-可以看到逻辑卷的详细信息"><a href="#输入-lvdisplay-可以看到逻辑卷的详细信息" class="headerlink" title="输入 lvdisplay 可以看到逻辑卷的详细信息"></a>输入 <code>lvdisplay</code> 可以看到逻辑卷的详细信息</h5><p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211013192540678.png" alt="image-20211013192540678"></p>
<p>逻辑区块地址<code>(Logical Block Address, LBA)</code>是描述计算机存储设备上数据所在区块的通用机制，一般用在像硬盘这样的辅助记忆设备。<code>LBA</code>可以意指某个数据区块的地址或是某个地址所指向的数据区块。</p>
<h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><blockquote>
<p>4、原服务器存在多少硬盘分区？（ B ）</p>
<p>A.1   B.2   C.3   D.4</p>
</blockquote>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211016005125784.png" alt="image-20211016005125784"></p>
<blockquote>
<p>5、原服务器中硬盘分区其中含有一个 LVM 逻辑卷的分区，请找出该分区内开始的逻辑区块地址<code>（LBA）</code>。（答案格式： 扇区，<code>Sector</code>）（<strong>C</strong>）</p>
<p><code>A.0    B.2048    C.2099200    D.4194344</code></p>
</blockquote>
<p>通过查找知道题目所说的分区是：<code>FMP</code>证据文件 -&gt; 展开镜像 -&gt; 选中 分区2 -&gt; 摘要 -&gt; 查看 物理位置：</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211015232231379.png" alt="image-20211015232231379"></p>
<p>但是这个内存物理地址的单位是字节<code>（Byte）</code>，而一个逻辑区块占用512位，所以要将这个值除以512。</p>
<p><code>1074790400/512=2099200</code></p>
<blockquote>
<p>7、该 LVM 逻辑卷分区内 root 逻辑卷的物理大小是多少？（单位：byte）（ C ）</p>
<p>A. 2,147,483,648   B. 2,147,504,128   C. 18,249,416,704   D. 20,400,046,080</p>
</blockquote>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211016005445924.png" alt="image-20211016005445924"></p>
<p>可以用 512 * 35643392 = 1824941670 从而得出 C选项</p>
<p>也可以用 17 *1024 * 1024 * 1024 = 18253611008 约等于 1824941670</p>
<h4 id="逻辑卷的文件系统"><a href="#逻辑卷的文件系统" class="headerlink" title="逻辑卷的文件系统"></a>逻辑卷的文件系统</h4><blockquote>
<p>6、该 LVM 逻辑卷分区内 root 逻辑卷的文件系统是什么？（ D ）</p>
<p>A.NTFS  B.EXT4  C.SWAP  D.XFS</p>
</blockquote>
<p>通过查找知道题目所说的分区是：<code>FMP</code>证据文件 -&gt; 展开镜像 -&gt; 选中对应的 root -&gt; 摘要 -&gt; 查看 分区类型：</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211015232205519.png" alt="image-20211015232205519"></p>
<h3 id="docker？"><a href="#docker？" class="headerlink" title="docker？"></a>docker？</h3><h5 id="输入-docker-images-查看本地所有的镜像"><a href="#输入-docker-images-查看本地所有的镜像" class="headerlink" title="输入 docker images 查看本地所有的镜像"></a>输入 <code>docker images</code> 查看本地所有的镜像</h5><p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211013201717153.png" alt="image-20211013201717153"></p>
<blockquote>
<p>17、该服务器中网站运行在 docker 容器中，其中 web 服务使用的是什么应用？（ C ） </p>
<p>A.apache   B.tomcat   C.nginx   D.IIS </p>
</blockquote>
<p>除了nginx选项，其他均未出现在上面的镜像中</p>
<blockquote>
<p>18、上题所述运行 web 服务的容器节点，使用的镜像名称是什么？（格式 REPOSITORY：TAG） （ D ）</p>
<p>A.apache: latest   B.tomcat: jessie-slim   C.nginx: jessie-slim   D.nginx: latest</p>
</blockquote>
<p>REPOSITORY ： TAG即可</p>
<h5 id="输入-docker-version-可以获得版本信息"><a href="#输入-docker-version-可以获得版本信息" class="headerlink" title="输入 docker version 可以获得版本信息"></a>输入 <code>docker version</code> 可以获得版本信息</h5><p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211013202020275.png" alt="image-20211013202020275"></p>
<h5 id="docker-ps-的相关指令"><a href="#docker-ps-的相关指令" class="headerlink" title="docker ps 的相关指令"></a><code>docker ps</code> 的相关指令</h5><p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211013202625279.png" alt="image-20211013202625279"></p>
<h5 id="docker-ps-显示正在运行中的容器节点"><a href="#docker-ps-显示正在运行中的容器节点" class="headerlink" title="docker ps 显示正在运行中的容器节点"></a><code>docker ps</code> 显示正在运行中的容器节点</h5><p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211014225650326.png" alt="image-20211014225650326"></p>
<h5 id="docker-ps-a-显示所有的容器节点"><a href="#docker-ps-a-显示所有的容器节点" class="headerlink" title="docker ps -a 显示所有的容器节点"></a><code>docker ps -a</code> 显示所有的容器节点</h5><p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211014225720208.png" alt="image-20211014225720208"></p>
<blockquote>
<p>13、在运行中的容器节点中，其中一台容器名称为 romantic_varahamihira 的容器节点，它的 hostname 是什么？（ D ）</p>
<p>A. 16fc160060c1   B. 1ef6292872e0   C. 753abb28b629   D. 53766d68636f</p>
</blockquote>
<blockquote>
<p>14、上题容器节点中，占用了主机的哪个端口？（ D ）</p>
<p>A.25   B.8012  C.8091   D.未占用端口</p>
</blockquote>
<blockquote>
<p>16、容器节点 ID 为 15debb1824e6 中，占用了主机的哪个端口？（ C ）</p>
<p>A.22    B.8091   C.39999   D.未占用端口</p>
</blockquote>
<blockquote>
<p>19、使用nginx服务的容器节点占用的容器端口是什么？（ B ）</p>
<p>A.22   B.80   C.8091   D.未占用端口</p>
</blockquote>
<p>观察上述的容器节点，在 command 一栏中找到 <code>“nginx -g”</code> 故可确定题目所指向的容器，进而找到容器端口。</p>
<p><code>docker ps</code> 命令中在<code>PORTS</code>里面显示了两个端口，前面<code>0.0.0.0</code>就是主机，也就是自己，而后面的转发端口就对应着<code>docker</code>的端口，如果只显示端口号而未绑定主机，说明为占用当前端口。(别被取证大师误导，其对是否占用无区分)</p>
<blockquote>
<p>15、在运行中的容器节点中，其中一台容器 ID 为 15debb1824e6 的容器节点，它运行了什么服 务？（ B ） </p>
<p>A.ftp   B.ssh   C.nginx   D.smtp</p>
</blockquote>
<h6 id="方法一：-1"><a href="#方法一：-1" class="headerlink" title="方法一："></a>方法一：</h6><p>通过观察上述的节点信息，在command一栏中找到 <code>&quot;/user/sbin/sshd -D&quot;</code>  故得出使用了SSH服务</p>
<h6 id="方法二：-1"><a href="#方法二：-1" class="headerlink" title="方法二："></a>方法二：</h6><p>在取证大师中，<code>FMP</code>取证结果 -&gt; 展开镜像 -&gt; 选中对应的 root -&gt; web服务器 -&gt; Docker -&gt; 容器信息 查看 取证列表 -&gt; 找到对应的容器ID -&gt; 双击打开，在txt文本中使用搜索功能，对上述选项进行搜索，发现仅存在 ssh，故选 ssh</p>
<h5 id="输入-docker-info-可以看到关于docker配置的相关信息"><a href="#输入-docker-info-可以看到关于docker配置的相关信息" class="headerlink" title="输入 docker info 可以看到关于docker配置的相关信息"></a>输入 <code>docker info</code> 可以看到关于docker配置的相关信息</h5><p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211014230344942.png" alt="image-20211014230344942"></p>
<p>或者在取证大师中可以数出个数</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211016010338036.png" alt="image-20211016010338036"></p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211016010354693.png" alt="image-20211016010354693"></p>
<blockquote>
<p>9、该服务器中运行了 docker 应用，在本地有多少 docker 镜像？（ B ）</p>
<p>A.10   B.11   C.12   D.13</p>
</blockquote>
<p>images 意思是镜像</p>
<blockquote>
<p>10、该 docker 应用的 server 版本是多少？（ C ）</p>
<p>A.16.05.2   B.17.03.8   C.18.09.7   D.19.03.3</p>
</blockquote>
<blockquote>
<p>11、该 docker 应用中总共有多少容器节点？（ A ）</p>
<p>A.10   B.11   C.12   D.13</p>
</blockquote>
<blockquote>
<p>12、运行中的容器节点有多少？（ C ）</p>
<p>A.1   B.2   C.3   D.4</p>
</blockquote>
<h5 id="输入docker-inspect-容器ID-可以查看该容器的详情信息"><a href="#输入docker-inspect-容器ID-可以查看该容器的详情信息" class="headerlink" title="输入docker inspect [容器ID] 可以查看该容器的详情信息"></a>输入<code>docker inspect [容器ID]</code> 可以查看该容器的详情信息</h5><p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211014233723662.png" alt="image-20211014233723662"></p>
<p>可以找出个容器节点于主机之间的网络连接模式是 ‘bridge’</p>
<blockquote>
<p>24、在 docker 中，各容器节点和主机之间的网络连接模式是什么？（ A ）</p>
<p>A. bridge 模式   B. host 模式   C. container 模式   D.none 模式</p>
</blockquote>
<p>或者在取证大师中 自动取证 -&gt; root -&gt; Web服务器 -&gt; Docker -&gt; 容器信息 拉伸条后拉可以找到网络方式。</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211016010451595.png" alt="image-20211016010451595"></p>
<h5 id="可以输入-docker-exec-it-容器ID前两位即可-bin-bash-，-查找相关文件的容器内部路径"><a href="#可以输入-docker-exec-it-容器ID前两位即可-bin-bash-，-查找相关文件的容器内部路径" class="headerlink" title="可以输入 docker exec -it [容器ID前两位即可] /bin/bash ， 查找相关文件的容器内部路径"></a>可以输入 <code>docker exec -it [容器ID前两位即可] /bin/bash</code> ， 查找相关文件的容器内部路径</h5><p>进入容器内部只需 <code>ls</code> 和 <code>cd [文件夹名]</code> 即可</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211014233253875.png" alt="image-20211014233253875"></p>
<blockquote>
<p>20、网站目录所在的容器内部路径为（格式：容器 ID：路径）（ B ） </p>
<p>A. d1085c1a8828:/home/ vue2-element-touzi-admin </p>
<p>B. 53766d68636f:/ home/ vue2-element-touzi-admin </p>
<p>C. 16fc160060c1:/var/www/ vue2-element-touzi-admin </p>
<p>D. 15debb1824e6: /var/www/ vue2-element-touzi-admin</p>
</blockquote>
<p>在取证大师里面实时搜索“vue2-element-touzi-admin“，点击命中文件名， 右端显示搜索到的文件，右键选择跳转到源文件</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211016014425179.png" alt="image-20211016014425179"></p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211016013230087.png" alt="image-20211016013230087"></p>
<blockquote>
<p>21、网站目录所在的主机路径为下列选项中的哪个？（ A ） A./var/lib/docker/overlay2/cca977c8ca4a251023000285fbc8b4556636e1adc53cb012c84133a7b 857abfc/diff/home/vue2-element-touzi-admin B./var/lib/docker/overlay2/fd27756120785ef656c9211b6147ef5f38d6a9811006d85359458f7fa 8d45415/diff/home/vue2-element-touzi-admin C./var/lib/docker/overlay2/f405ba5e3f1f0e04a3585fbc95a47d13b4009dd9d599ac91015babebd 5a5ff9b/diff/var/www/ vue2-element-touzi-admin D./var/lib/docker/overlay2/d42b9a02aa87386b137242f691cb3e6303c4c0f3441419efb17ff550fd f5de28/diff/var/www/ vue2-element-touzi-admin</p>
</blockquote>
<p>22题同理</p>
<blockquote>
<p>22、网站日志的路径在哪？（格式：容器 ID：路径）（ C ） </p>
<p>A. 53766d68636f:/etc/nginx/logs/jrweb.log </p>
<p>B. 53766d68636f:/var/log/access.log </p>
<p>C. 16fc160060c1:/etc/nginx/logs/jrweb.log </p>
<p>D. 16fc160060c1:/var/log/access.log</p>
</blockquote>
<p>我们可以看看上一个题的日志文件</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211016014902557.png" alt="image-20211016014902557"></p>
<p>在这里明显能看到猜解密码的行为，所以这个时候就是“案发当时”，此时的<code>IP</code>地址就是<code>192.168.184.128:8091</code>， 以及犯罪嫌疑人的IP地址为 <code>192.168.184.133</code></p>
<blockquote>
<p>23、案发当时，该服务器的原始 IP 地址是多少？（ D ）</p>
<p>A.192.168.160.89   B.192.168.184.100   C.192.168.120.111   D.192.168.184.128</p>
</blockquote>
<blockquote>
<p>26、从网站日志中，我们可以看到嫌疑人入侵服务器所使用的 IP 是（ C ）</p>
<p>A.192.168.184.1   B.192.168.160.89   C.192.168.184.133   D.192.168.160.169</p>
</blockquote>
<h3 id="数据库？"><a href="#数据库？" class="headerlink" title="数据库？"></a>数据库？</h3><h5 id="head-前多少行-文件-可以查看文件的前多少行信息"><a href="#head-前多少行-文件-可以查看文件的前多少行信息" class="headerlink" title="head -[前多少行] [文件] 可以查看文件的前多少行信息"></a>head -[前多少行] [文件] 可以查看文件的前多少行信息</h5><p>查询网站使用的是什么数据库：一般来说，项目都是从<code>github</code>上面<code>clone</code>下来的，所以根目录应该在<code>home</code>文件夹下，查看<code>README.md</code>文件，发现：</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211014234817530.png" alt="image-20211014234817530"></p>
<blockquote>
<ol start="27">
<li>网站目录中网站的主配置文件是哪一个？(相对路径)（<strong>C</strong>）</li>
</ol>
<p><code>A./config/index.js    B./server/api.js    C./server/index.js    D./src/main.js</code></p>
<p>这里他说的是<code>node js</code>的配置文件，所以应该在<code>/server</code>目录下，对比三个文件，明显就是<code>C</code>选项</p>
</blockquote>
<p>查看 /server 目录下的db.js文件</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211015000537088.png" alt="image-20211015000537088"></p>
<p>其中可以看出使用的数据库为mongodb，第一个root为数据库的用户名，第二个root为数据库的密码，后面的192.168.184.129为数据库所在的服务器IP， 27017为数据库端口， 数据库名为tougu</p>
<blockquote>
<p>28、该网站使用的是什么数据库？（ C ）</p>
<p>A.mysql   B.oracle   C.mongodb   D.redis</p>
</blockquote>
<blockquote>
<p>29、所使用数据库的端口是多少？（ D ）</p>
<p>A.1521   B.3306   C.6379   D.27017</p>
</blockquote>
<blockquote>
<p>30、数据库所在服务器 IP 是多少？（ D ）</p>
<p>A.192.168.160.131   B.192.168.184.131   C.192.168.160.169   D.192.168.184.129</p>
</blockquote>
<blockquote>
<p>31、数据库的用户名是什么？（ A ）</p>
<p>A.root   B.tougu   C.admin   D.goose</p>
</blockquote>
<blockquote>
<p>32、数据库的密码是什么？（ D ）</p>
<p>A.123456   B.admin   C.goose   D.root</p>
</blockquote>
<blockquote>
<p>33、该网站所使用的数据库库名是什么？( B ) </p>
<p>A.root    B.tougu   C.admin   D.goose</p>
</blockquote>
<h5 id="输入-stat-文件名-可以查看文件时间状态"><a href="#输入-stat-文件名-可以查看文件时间状态" class="headerlink" title="输入 stat [文件名] 可以查看文件时间状态"></a>输入 <code>stat [文件名]</code> 可以查看文件时间状态</h5><h5 id="输入-more-bash-history-查看历史操作记录"><a href="#输入-more-bash-history-查看历史操作记录" class="headerlink" title="输入 more .bash_history 查看历史操作记录"></a>输入 <code>more .bash_history</code> 查看历史操作记录</h5><p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211015001337208.png" alt="image-20211015001337208"></p>
<p>可以知道黑客曾经对.bash_history目录进行加密</p>
<blockquote>
<p>34、在案发时，黑客对该服务器某个文件/目录进行了加密，请问是哪个文件/目录？（ A ） A.<del>/.bash_history   B./var/log/   C./etc/ssh/sshd_config   D.</del>/ runit-agent.txt</p>
</blockquote>
<h2 id="Part-2"><a href="#Part-2" class="headerlink" title="Part 2"></a>Part 2</h2><h5 id="输入-find-name-名字-可以搜索所需要的配置文件（-conf结尾）或-日志文件（-log结尾）"><a href="#输入-find-name-名字-可以搜索所需要的配置文件（-conf结尾）或-日志文件（-log结尾）" class="headerlink" title="输入 find / -name [名字] 可以搜索所需要的配置文件（.conf结尾）或 日志文件（.log结尾）"></a>输入 <code>find / -name [名字]</code> 可以搜索所需要的配置文件（.conf结尾）或 日志文件（.log结尾）</h5><blockquote>
<p>35、该数据库服务器使用数据库的安装路径在哪？（ D ）</p>
<p>A. /etc/mysql/   B. /home/redis/   C. /etc/mongo/   D. /var/lib/mongo/</p>
</blockquote>
<blockquote>
<p>36、数据库的配置文件的路径？（ C ）</p>
<p>A./var/lib/mongo/mongo.conf </p>
<p>B./var/lib/mongo/mongod.conf </p>
<p>C./etc/mongod.conf </p>
<p>D./home/redis/redis.conf</p>
</blockquote>
<blockquote>
<p>37、数据库的日志文件路径在哪里？（ C ）</p>
<p>A./etc/redis.log </p>
<p>B./var/log/mongodb.log </p>
<p>C./var/log/mongodb/mongod.log </p>
<p>D./var/lib/mongo/mongo.log</p>
</blockquote>
<h5 id="查看前端代码"><a href="#查看前端代码" class="headerlink" title="查看前端代码"></a>查看前端代码</h5><p>因为读取用户的注册信息在前端，所以我们回到前端（检材1）来看看代码：</p>
<p>取证大师实时搜索api.js(我也不知道为什么搜这个doge)，打开可以看到</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211016113742936.png" alt="image-20211016113742936"></p>
<p>说明该数据库中网站用户表里的密码未采用加密手段，而是直接判断</p>
<blockquote>
<p>39、该数据库中网站用户表里的密码字段加密方式是（ A ）</p>
<p>A.未加密</p>
<p>B.双重 MD5</p>
<p>C.MD5 加 salt</p>
<p>D.MD5</p>
</blockquote>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211018230358283.png" alt="image-20211018230358283"></p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211018230353566.png" alt="image-20211018230353566"></p>
<blockquote>
<p>40、该用户表被做过什么样的修改？（ A ） </p>
<p>A.删除用户    B.修改用户密码    C.修改用户名    D.添加用户</p>
</blockquote>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211018225016475.png" alt="image-20211018225016475"></p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211018224800635.png" alt="image-20211018224800635"></p>
<blockquote>
<p>41、嫌疑人对该数据库的哪个库进行了风险操作？（ C ） </p>
<p>A.licai    B.touzi    C.tougu     D.admin </p>
<p>42、嫌疑人对上述数据库做了什么样的风险操作？（ D ） </p>
<p>A.修改库名    B.添加库    C.查询库    D.删除库 </p>
<p>43、嫌疑人在哪个时间段内登陆数据库？（ D ） </p>
<p>A.18:03-18:48    B.18:05-18:45    C.18:01-18:50    D.18:05-18:32 </p>
<p>44、嫌疑人在什么时间对数据库进行了 42 题所述的风险操作？（ A ） </p>
<p>A.18:09:37    B.18:09:40    C.18:09:44    D.18:09:50</p>
</blockquote>
<h2 id="Part-3"><a href="#Part-3" class="headerlink" title="Part 3"></a>Part 3</h2><p>火眼仿真帮我们把root的密码设置为123456，于是我们直接登陆终端，在控制台中输入<code>history</code></p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211016235238300.png" alt="image-20211016235238300"></p>
<p>我们看到出现了多次pptpd关键字，故可知采用了pptpd协议</p>
<blockquote>
<p>45、该服务器所使用的 VPN 软件，采用了什么协议（ B ） </p>
<p>A.L2TP    B.PPTP    C.IPSec    D.NFS</p>
</blockquote>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211016235430504.png" alt="image-20211016235430504"></p>
<p>设置了多次时区，最后一次设置为 Asia/Dhaka</p>
<p>附：可以输入<code>date -R</code>获取当前为+0600，换算较麻烦，可以作为验证</p>
<blockquote>
<p>46、该服务器的时区为（ D ） </p>
<p>A. Asia/ShangHai    B. Asia/Tokyo    C. Asia/Bangkok    D. Asia/Dhaka</p>
</blockquote>
<p>老办法，在取证大师里实时搜索即可</p>
<blockquote>
<p>47、该服务器中对 VPN 软件配置的 option 的文件位置在哪里？（ A ） </p>
<p>A. /etc/ppp/options.pptpd </p>
<p>B./var/lib/vpn/options.pptpd </p>
<p>C./etc/ipsec/options.ipsecd </p>
<p>D./etc/l2tp/options.l2tpd</p>
</blockquote>
<p>日志文件一般存储在<code>/var/log</code>文件夹里，分别打开各个日志文件，发现wtmp存在日志文件</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211017000952927.png" alt="image-20211017000952927"></p>
<blockquote>
<p>48、VPN 软件开启了写入客户端的连接与断开，请问写入的文件是哪个？（ A ） </p>
<p>A.wtmp    B.btmp    C.ftmp    D.tmp</p>
</blockquote>
<p>上题已经知道了VPN软件配置的option文件位置，不妨打开来看看</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211017001609219.png" alt="image-20211017001609219"></p>
<p>找到了pptpd.conf配置文件的位置，顺藤摸瓜，打开配置文件看看，发现了推荐ip范围</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211017001749389.png" alt="image-20211017001749389"></p>
<blockquote>
<p>49、VPN 软件客户端被分配的 IP 范围是（ B ） </p>
<p>A.192.168.184.1-192.168.184.11 </p>
<p>B.192.168.184.12-192.168.184.18 </p>
<p>C.192.168.184.19-192.168.184.26 </p>
<p>D.192.168.184.27-192.168.184.35</p>
</blockquote>
<p>还找到了VPN软件的日志路径（笑）</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211017001651848.png" alt="image-20211017001651848"></p>
<blockquote>
<p>50、由 option 文件可以知道，option 文件配置了 VPN 软件的日志路径为（ D ） </p>
<p>A./var/lib/logs/    B./etc/logs/    C./var/log/pptp/    D./var/log/</p>
</blockquote>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211017002444421.png" alt="image-20211017002444421"></p>
<p>根据题意，直接到所在路径打开文件比对即可</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211017002508598.png" alt="image-20211017002508598"></p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211017002521633.png" alt="image-20211017002521633"></p>
<p>etc/ppp/chap-secrets 文件如图所示</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211017002604641.png" alt="image-20211017002604641"></p>
<p>etc/ppp/pap-secrets 文件如图所示</p>
<blockquote>
<p>51、VPN 软件记录了客户端使用的名称和密码，记录的文件是（ C ） </p>
<p>A. /etc/l2tp/chap-secrets </p>
<p>B. /etc/ipsec/pap-secrets </p>
<p>C. /etc/ppp/chap-secrets </p>
<p>D. /etc/ppp/pap-secrets</p>
</blockquote>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211017002930685.png" alt="image-20211017002930685"></p>
<p>由于北京时间（+08取证大师默认使用）比该服务器的市区（+06）早两个小时，所以需要将时间减去两个小时整</p>
<blockquote>
<p>52、在服务器时间 2019-07-02_12:08:27 登陆过 VPN 客户端的用户名是哪个？（ A ） </p>
<p>A. root    B. vpn1    C. vpn2    D. vpn3</p>
</blockquote>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211017003105700.png" alt="image-20211017003105700"></p>
<blockquote>
<p>53、上题用户登陆时的客户 IP 是什么？（ D ） </p>
<p>A. 192.168.184.133    B. 172.16.81.101    C. 192.168.184.134    D. 192.168.43.238</p>
</blockquote>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211017003553008.png" alt="image-20211017003553008"></p>
<blockquote>
<p>54、通过 IP172.16.80.188 登陆 VPN 服务器的用户名是哪个？（ B ）</p>
<p>A. root    B. vpn1    C. vpn2    D. vpn3</p>
</blockquote>
<blockquote>
<p>55、上题用户登陆 VPN 服务器的北京时间是（ D ） </p>
<p>A. 2019-07-11_10:46:50 </p>
<p>B. 2019-07-11_11:30:36 </p>
<p>C. 2019-07-13_14:15:37 </p>
<p>D. 2019-07-13_16:15:37</p>
</blockquote>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211017004214836.png" alt="image-20211017004214836"></p>
<p>取证大师搜索<code>network.cap</code>得到Bash的历史记录，发现曾经的操作与ens33有关</p>
<blockquote>
<p>56、该服务器曾被进行过抓包，请问 network.cap 是对哪个网卡进行抓包的抓包文件（ B ） A.eth0    B.ens33    C.ens37    D.ens160</p>
</blockquote>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211017004449842.png" alt="image-20211017004449842"></p>
<p>同理，搜索ens37，得到Bash的操作记录，曾对netwoek1.cap和net0713-1.cap进行过抓包</p>
<p>题目要求保存下来，即未被删除，没有被rm移除</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211017004708378.png" alt="image-20211017004708378"></p>
<p>network1.cap没有保存下来</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211017004755692.png" alt="image-20211017004755692"></p>
<p>net0713-1.cap被保存下来了</p>
<blockquote>
<p>57、对 ens37 网卡进行抓包产生的抓包文件并保存下来的是哪个？（ D ） </p>
<p>A. network.cap    B. network1.cap    C. net0713.cap    D. net0713-1.cap</p>
</blockquote>
<p>我们从上面的信息知道net0713-1.cap已经被保存下来，并且能找到该文件</p>
<p>以cap结尾的文件我们需要用<strong>WireShark</strong>来打开（个人对该工具理解还较为浅显，需要加深理解）</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211017011017220.png" alt="image-20211017011017220"></p>
<p>解题并不是因为看懂了，而是四个选项中仅仅出现了172.16.80.62，光是凭侥幸而得出结论，哭哭了。</p>
<p>下面引用BB大佬的话</p>
<blockquote>
<p>但是为什么第一个数据包里面就没有答案呢？？？这是因为该<code>vpn</code>服务器为双网卡，对内IP为<code>192.168.184.133</code>，具备对检材1（<code>192.168.184.128</code>）和检材2（<code>192.168.184.129</code>）访问权限，出口/服务端IP为<code>172.16.80.92</code>。</p>
</blockquote>
<blockquote>
<p>58、从保存的数据包中分析可知，出口的 IP 为（ A ）</p>
<p>A. 172.16.80.92 </p>
<p>B. 172.16.81.101 </p>
<p>C. 172.16.81.188 </p>
<p>D. 172.16.80.133</p>
</blockquote>
<h2 id="Part-4"><a href="#Part-4" class="headerlink" title="Part 4"></a>Part 4</h2><p>老朋友了，选择检材右键哈希值计算SHA256，即可得到答案（误！！！，所求得的为镜像的SHA256值！！！）</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211017012546445.png" alt="image-20211017012546445"></p>
<p>80GB计算SHA256用了十几分钟（快哭了，竟然还算错了，题目要求的是文件的SHA256）</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211017014012553.png" alt="image-20211017014012553"></p>
<blockquote>
<p>59、计算“检材 4.E01”文件的 sha256 值（ C ） </p>
<p>A. 58a4ab5ee3dc4c4a279fa8287ed7dce315090512fa87127f8f9278c7972366c5 </p>
<p>B. 58a4ab5ee3dc4c4a279fa8287ed7dce315090512fa87127f8f9278c7972366c6 </p>
<p>C. e6e47e210bd56c7071ce73ab5523736120071d0f3da5335936d7beb25c3914cd </p>
<p>D. 1e646dec202c96b72f13cc3cf224148fc4e19d6faaaf76efffc31b1ca2cdd200</p>
</blockquote>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211017012700260.png" alt="image-20211017012700260"></p>
<p>取证大师的案例概览好像只对WINDOWS系统有效，并且显示的信息十分详细，就连底裤都看干净了（狗头）</p>
<blockquote>
<p>60、请分析该检材的操作系统版本（ A ）</p>
<p>A. Windows 10 Education </p>
<p>B. Windows 10 Home </p>
<p>C. Windows 10 Pro </p>
<p>D. Windows 10 Enterprise</p>
</blockquote>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211017014255144.png" alt="image-20211017014255144"></p>
<blockquote>
<p>61、找出该系统用户最后一次登陆时间：（ C ） </p>
<p>A. 2019-07-14 10:50:02  </p>
<p>B. 2019-07-14 10:10:02 </p>
<p>C. 2019-07-14 10:40:02  </p>
<p>D. 2019-07-14 10:30:02</p>
</blockquote>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211017013544571.png" alt="image-20211017013544571"></p>
<blockquote>
<p>62、找出该系统最后一次正常关机时间：（ C ） </p>
<p>A.2019-07-14 17:30:05 </p>
<p>B.2019-07-14 10:30:05  </p>
<p>C.2019-07-14 11:30:05  </p>
<p>D.2019-07-14 12:30:05</p>
</blockquote>
<p>取证大师已经在证据文件里帮我们分类好了常用文件夹，点击桌面，发现有三个Desktop文件夹，依次打开，发现题目所描述的txt文件，计算SHA256值</p>
<blockquote>
<p>63、请计算检材桌面上文本文件的 sha256 值：（ A ） A.58a4ab5ee3dc4c4a279fa8287ed7dce315090512fa87127f8f9278c7972366c5  B.58a4ab5ee3dc4c4a279fa8287ed7dce315090512fa87127f8f9278c7972366c6 C.58a4ab5ee3dc4c4a279fa8287ed7dce315090512fa87127f8f9278c7972366c7  D.58a4ab5ee3dc4c4a279fa8287ed7dce315090512fa87127f8f9278c7972366c8</p>
</blockquote>
<p>FMP -&gt; 自动取证 -&gt; 检材4.E01 -&gt; 系统痕迹 -&gt; 安装软件 ，下面的分支依次点开查看时间</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211017014836965.png" alt="image-20211017014836965"></p>
<blockquote>
<p>64、该系统于 2019 年 7 月 13 日安装的软件为：（ A ） </p>
<p>A.Eraser     B.Putty    C.Xftp     D.Xshell</p>
</blockquote>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211017015202369.png" alt="image-20211017015202369"></p>
<p>光是通过WINRAR的使用记录查找的话，没有显示时间，看起来很难受</p>
<p>于是换一个思路，通过FMP的WIN10时间轴，定位到2019.07.13 17:52:19，可以看到操作了WINRAR程序</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211017015339856.png" alt="image-20211017015339856"></p>
<blockquote>
<p>65、找出该嫌疑人于 2019-07-13 17:52:19 时，使用 WinRAR 工具访问了_____文件：（ D ） A.navicat11.zip     B.we.tar.gz    C.test2-master.zip     D.BitLocker.rar</p>
</blockquote>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211017015732164.png" alt="image-20211017015732164"></p>
<p>其他的软件我都认识，只不过这个xftp比较奇怪，很容易联想到Xshell（错误！！！）</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211017120946484.png" alt="image-20211017120946484"></p>
<p>在应用程序使用痕迹中<strong>仔细检索</strong>，发现了foxmail.exe曾在该时间使用</p>
<blockquote>
<p><strong>66、系统于 2019-07-13 17:53:45 时运行了___程序：（ D ）</strong> </p>
<p><strong>A.regedit.exe     B.WinRAR.exe    C.Xshell.exe     D.Foxmail.exe</strong></p>
</blockquote>
<p>文件疑似执行了删除操作，所以实时搜索找不到，本来想尝试原始数据搜索，但是特别耗时间，故而放弃。</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211017020343616.png" alt="image-20211017020343616"></p>
<p>翻翻资源管理器痕迹，无意中发现了这个文件夹，时间上恰为下载完成后解压得到的文件夹（不严谨）</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211017020904302.png" alt="image-20211017020904302"></p>
<p>嘿嘿嘿，挂载到本地磁盘，然后共享文件获取访问权限，来到了下载这里，得到了确切的下载时间</p>
<blockquote>
<p>67、文件 test2-master.zip 是什么时间下载到本机的：（ D ） </p>
<p>A.2019-07-13 14:21:01     </p>
<p>B.2019-07-13 17:22:01   </p>
<p>C.2019-07-13 15:23:01  </p>
<p>D.2019-07-13 16:20:01</p>
</blockquote>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211017021833528.png" alt="image-20211017021833528"></p>
<p>通过在Google Chrome的下载记录发现曾经使用这个软件下载文件</p>
<blockquote>
<p>68、文件 test2-master.zip 是使用什么工具下载到本地的：（ A ） </p>
<p>A.Chrome     B.Internet Explorer    C.edge     D.迅雷</p>
</blockquote>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211017123416942.png" alt="image-20211017123416942"></p>
<p>可以从上面的信息看到，文件创建时间为00秒，经过十五秒后文件修改，可以理解为下载文件从创建新文件到下载信息完成。</p>
<blockquote>
<p>70、嫌疑人通过远程连接到 128 服务器，下载了什么文件到本机：（ B ） </p>
<p>A.web.tar.gz     B.we.tar.gz    C.home.tar.gz     D.wwwroot.tar.gz</p>
</blockquote>
<blockquote>
<p>71、承接上一题，下载该文件用了多长时间：（ C ） </p>
<p>A.10 秒     B.20 秒    C.15 秒     D.25 秒</p>
</blockquote>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211017124656586.png" alt="image-20211017124656586"></p>
<p>我们在检材4中没有发现we.tar.gz，应该是被删掉了，不过实时搜索的时候发现在检材一中发现了该文件，可以推断出该电脑与服务器曾经进行过连接操作。</p>
<blockquote>
<p>72、请计算该下载文件的 sha256 值：（ D ） A.077d894557edf44e5792e0214e0f1c46b9b615be11ac306bcce2af9d666f47d8  B.077d894557edf44e5792e0214e0f1c46b9b615be11ac306bcce2af9d666f47d7  C.077d894557edf44e5792e0214e0f1c46b9b615be11ac306bcce2af9d666f47d6  D.077d894557edf44e5792e0214e0f1c46b9b615be11ac306bcce2af9d666f47d5</p>
</blockquote>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211017121904622.png" alt="image-20211017121904622"></p>
<p><strong>国际移动设备识别码</strong>（<strong>International Mobile Equipment Identity</strong>，<strong>IMEI</strong>），即通常所说的手机序列号、手机“串号”，用于在移动电话网络中识别每一部独立的手机等移动通信设备，相当于移动电话的身份证。</p>
<blockquote>
<p>73、请分析并提取，嫌疑人所用的手机的 IMEI 号码：（ C ） </p>
<p>A.352021062748965     B.352021062748966    C.352021062748967      D.352021062748968</p>
</blockquote>
<p>对于以下几题，在电脑里没有相关的社交软件的使用记录，故可推断出信息极有可能被保存在手机备份中。</p>
<p>我们在火眼证据分析中找到手机备份，然后添加到检材，然后分析，密码？？试一下检材4桌面上的``niuroumian6`！对了！</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211017193556301.png" alt="image-20211017193556301"></p>
<blockquote>
<p>74、嫌疑人是通过何种方式联系到售卖恶意程序的卖家的：（ B ）</p>
<p> A.微信     B.QQ    C.短信     D.邮件</p>
</blockquote>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211017193623009.png" alt="image-20211017193623009"></p>
<blockquote>
<p>75、嫌疑人和卖家的资金来往是通过何种方式：（ A ） </p>
<p>A.微信     B.QQ    C.银行转账     D.支付宝</p>
</blockquote>
<blockquote>
<p>76、嫌疑人在犯罪过程中所使用的 QQ 账号为：（ A ）</p>
<p> A.1649840939     B.1137588348     C.364505251     D.1722629449</p>
</blockquote>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211017194124463.png" alt="image-20211017194124463"></p>
<blockquote>
<p>77、卖家所使用的微信账号 ID 为：（ C ） </p>
<p>A.refrain_C     B.flame_guan    C.chao636787     D.sword19880521</p>
</blockquote>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211017194802500.png" alt="image-20211017194802500"></p>
<p>查找edge的下载记录时，发现两个文件没有大小，但是在左下角有记录，发现是卖家所给的站点，故可推断下载了两个文件，并且下载地点时D盘</p>
<blockquote>
<p>78、嫌疑人下载了几个恶意程序到本机：（ B ） </p>
<p>A.1     B.2    C.3     D.4</p>
</blockquote>
<blockquote>
<p>79、恶意程序被嫌疑人保存在什么位置：（ D ） </p>
<p>A.D:/DOWNLOAD     B.C:/USER    C.C:/     D.D:/</p>
</blockquote>
<blockquote>
<p>80、恶意程序是使用什么工具下载到本地的：（ C ） </p>
<p>A.Chrome     B.Internet Explorer    C.edge     D.迅雷</p>
</blockquote>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20211017195754325.png" alt="image-20211017195754325"></p>
<p>看着有种莫名的喜感</p>
<blockquote>
<p>81、嫌疑人是什么时间开始对受害者实施诈骗的：（ C ） </p>
<p>A.2019-07-13 19:14:44  </p>
<p>B.2019-07-13 19:24:44 </p>
<p>C.2019-07-13 19:04:44  </p>
<p>D.2019-07-13 19:44:44</p>
</blockquote>
<hr>
<h3 id="干不动了，下面放的是BB的题解，我这种菜鸟就只能走到这里了。。。"><a href="#干不动了，下面放的是BB的题解，我这种菜鸟就只能走到这里了。。。" class="headerlink" title="干不动了，下面放的是BB的题解，我这种菜鸟就只能走到这里了。。。"></a>干不动了，下面放的是BB的题解，我这种菜鸟就只能走到这里了。。。</h3><p>在电脑里面的备份平台里面有一台虚拟机，搞出来，有密码？？？搞他！我们先<a href="https://www.cnblogs.com/lcl0421/p/9227805.html">修改密码</a>，在<code>/home/admin888/fund/</code>文件夹下发现<code>sqlite</code>数据库，我们导出来~</p>
<blockquote>
<p><code>$ scp root@192.168.247.155:/home/admin888/fund/db.sqlite3 ./db.sqlite3</code></p>
<p><code>$ python3 -m http.server 2021</code></p>
</blockquote>
<p>然后根据手机号定位受害人是赵昊，数据库里面查看银行卡号：</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201107154313948.png" alt="image-20201107154313948"></p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201107154258903.png" alt="image-20201107154258903"></p>
<blockquote>
<ol start="83">
<li><p>请综合分析，嫌疑人第一次入侵目标服务器的行为发生在：（<strong>C</strong>）</p>
<p><code> A. 2019-07-13 16:17:30     B. 2019-07-13 16:17:32     C. 2019-07-13 16:17:35     D. 2019-07-13 16:17:38</code></p>
</li>
</ol>
</blockquote>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201107154615513.png" alt="image-20201107154615513"></p>
<blockquote>
<ol start="84">
<li><p>请综合分析，嫌疑人入侵服务所使用的登陆方式为：（<strong>B</strong>）</p>
<p> A. SSH 密码登陆     B. SSH 密钥登陆     C. 连接后门程序     D.FTP 登陆</p>
</li>
</ol>
</blockquote>
<p>我们之前在检材四中的xshell数据文件中见到了密钥文件：</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201107155204586.png" alt="image-20201107155204586"></p>
<blockquote>
<ol start="85">
<li><p>可知嫌疑人应对外发送过邮件，请分析并找到发出的邮件，可知邮件的发送时间为：（<strong>B</strong>）</p>
<p><code> A. 2019-07-13 17:55       B. 2019-07-14 17:56       C. 2019-07-14 17:57        D. 2019-07-14 17:58</code></p>
</li>
<li><p>可知嫌疑人应对外发送过邮件，请分析并找到发出的邮件，可知邮件收件人为：（<strong>B</strong>）</p>
<p><code> A. 1649841939@qq.com    B. 1649840939@qq.com    C. 1649845939@qq.com    D. 1649848939@qq.com</code></p>
</li>
</ol>
</blockquote>
<p>这个题目是真的骚，我们在前面有发现，他下载过<code>Foxmail</code>，于是我们查看<code>Foxmail</code>使用痕迹，然后把时间定位到<code>2019-07-13 17:52:20</code>，所以一般就选择A，但是是错的……因为他不一定用<code>Foxmail</code>发文件。所以我们换一个思路，在检材三中（嫌疑人使用的VPN服务器）有数据包，既然他发邮件，那么一定走了代理，所以我们再研究研究那个检材3的那两个数据包。这里有一个姿势点：</p>
<blockquote>
<p><strong>常用的电子邮件协议有<code>SMTP、POP3、IMAP4</code>它们都隶属于<code>TCP/IP</code>协议簇.</strong></p>
</blockquote>
<p>所以我们数据包里面直接找这几个协议：<img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201108094246421.png" alt="image-20201108094246421"></p>
<blockquote>
<ol start="87">
<li><p>请重构被入侵的网站，可知该网站后台管理界面的登陆用户名为：（<strong>C</strong>）</p>
<p><code> A. root       B Administered       C. admin        D. user</code></p>
</li>
</ol>
</blockquote>
<p>重构网站需要先恢复数据库，我们再检材2中有加密程序，有加密过的数据库。所以我们开始老本行！逆！</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201108111125565.png" alt="image-20201108111125565"></p>
<p>思路很简单，上<code>exp</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;db.encrypt&quot;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    s=f.read()</span><br><span class="line"></span><br><span class="line">r=<span class="built_in">bytes</span>([((x^<span class="number">0xaa</span>)+<span class="number">256</span>-<span class="number">66</span>)%<span class="number">256</span> <span class="keyword">for</span> x <span class="keyword">in</span> s])</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;db&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> inp:</span><br><span class="line">    inp.write(r)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后计算<code>SHA256</code>：<img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201108112522288.png" alt="image-20201108112522288"></p>
<p>我们在检材4的<code>C</code>盘中看到了一个待挂载的硬盘：</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201108154253039.png" alt="image-20201108154253039"></p>
<p>然后双击，显示<code>Bitlocker</code>：<img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201108154511990.png" alt="image-20201108154511990"></p>
<p>我们打开<code>Bitlocker</code>：<img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201108154544420.png" alt="image-20201108154544420"></p>
<p>现在我们缺少密码……还记得前面在翻<code>QQ</code>的时候看到的那个消息嘛，提示一下：</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201108154812496.png" alt="image-20201108154812496"></p>
<p>我们再根据他的<code>QQ</code>号和上面这个内容，可以猜到，在前面我们分析的邮件正是他用来备份密码的右键，我们复原一下邮件：</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201108162121999.png" alt="image-20201108162121999"></p>
<p>发现4个<code>EML</code>文件，导出以后，直接下载<img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201108162907437.png" alt="image-20201108162907437"></p>
<p>但是有密码！！！我们联想检材4桌面上的字典和<code>niuroumian6</code>，我们尝试用这个字典来爆破压缩包。这里爆破用的工具是开膛手<code>john</code>和<code>hashcat</code>：</p>
<blockquote>
<p><code>$ rar2john.exe BitLocker.rar </code>BitLocker.rar:$rar5$16$0c231f49ba3ded4bc944dee58f2be760$15$2a5c3ec4a5380b7a9d5517cc8ba386b6$8$07400e39e08a2e03`</p>
<p><code>$ hashcat.exe -m 13000 -a 0 $rar5$16$0c231f49ba3ded4bc944dee58f2be760$15$2a5c3ec4a5380b7a9d5517cc8ba386b6$8$07400e39e08a2e03 新建文本文档.txt</code></p>
</blockquote>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201110210507588.png" alt="image-20201110210507588"></p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201110210522337.png" alt="image-20201110210522337"></p>
<p>215643485745446664666432494f413536343335363a223a22</p>
<p>!VCHWEDfdfd2IOA564356:”:”</p>
<p>打开密钥备份文件，用恢复密钥成功解锁硬盘：</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201110210731636.png" alt="image-20201110210731636"></p>
<p>查看<code>db</code>文件，和我们前面逆向加密程序恢复的<code>db</code>一样。</p>
<p>里面还有那个网站的……所有东西，那我们把这个<code>dump</code>出来，：</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201111111604097.png" alt="image-20201111111604097"></p>
<blockquote>
<ol start="88">
<li><p>请重构被入侵的网站，并登陆网站后台管理界面，对该网站进行证据固定，可知该网站首页左侧导航栏，不包含下列那个内容：（<strong>D</strong>）</p>
<p> A. 信息列表       B. 资金管理       C. 资金数据       D. 会员信息</p>
</li>
<li><p>通过分析知，嫌疑人对目标服务器植入了勒索程序，请解密检材 2 中的被加密数据库，</p>
<p> 其<code>sha256</code>值为：（<strong>A</strong>）</p>
<p><code> A. 8dcf2f71482bb492b546eec746c714be9324ea254778bf5cbb9e5115b30c77a2</code></p>
<p><code> B. 8dcf2f71482bb492b546eec746c714be9324ea254778bf5cbb9e5115b30c77a3</code></p>
<p> <code>C. 8dcf2f71482bb492b546eec746c714be9324ea254778bf5cbb9e5115b30c77a4</code></p>
<p> <code>D.8dcf2f71482bb492b546eec746c714be9324ea254778bf5cbb9e5115b30c77a5</code></p>
</li>
</ol>
</blockquote>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201111125021116.png" alt="image-20201111125021116"></p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201111112517872.png" alt="image-20201111112517872"></p>
<blockquote>
<ol start="90">
<li><p>通过分析知，嫌疑人有对目标服务器植入 <code>ddos </code>程序，对该程序进行功能性分析，可知该程序会将自身复制到目标机器的什么目录下：（<strong>B</strong>）</p>
<p><code> A. /etc       B. /lib       C. /root       D. /tmp</code></p>
</li>
<li><p>通过分析知，嫌疑人有对目标服务器植入 ddos 程序，对该程序进行功能性分析，可知该程序主控地址为（多选）：（<strong>AD</strong>）</p>
<p><code>A. shaoqian.f3322.net     B. shaoqian.f3344.net     C. gh.dsaj3a2.org     D. gh.dsaj2a1.org</code></p>
</li>
</ol>
</blockquote>
<p>根据聊天记录易知，该<code>ddos</code>程序是<code>runit</code>，我们在检材四里面找到该文件，然后逆向分析……</p>
<p>我们在main函数里面看见有一些乱码，然后前面跟了解密函数。我们跟进然后机密看看：</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201112131329103.png" alt="image-20201112131329103"></p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201112131341467.png" alt="image-20201112131341467"></p>
<p>然后我们再找找程序里面还有那些加密数据，然后写个脚本解一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">enc=[<span class="string">&quot;m7A4nQ_/nA&quot;</span>,<span class="string">&quot;m [(n3&quot;</span>,<span class="string">&quot;m6_6n3&quot;</span>,<span class="string">&quot;m4S4nAC/n&amp;ZV&quot;</span>,<span class="string">&quot;m.[$n__#4%\\C&quot;</span>,<span class="string">&quot;m.[$n3&quot;</span>,<span class="string">&quot;m4S4nAC/nA&quot;</span>,<span class="string">&quot;m4S4nAC/n&amp;ZV&quot;</span>,<span class="string">&quot;m.[$n__#4%\\C&quot;</span>,<span class="string">&quot;m.[$n3&quot;</span>]</span><br><span class="line">a=[<span class="number">0x36</span>,<span class="number">0x46</span>,<span class="number">0x36</span>,<span class="number">0x7B</span>,<span class="number">0x1C</span>,<span class="number">0x19</span>,<span class="number">0x27</span>,<span class="number">0x34</span>,<span class="number">0x2D</span>,<span class="number">0x55</span>,<span class="number">0x1B</span>,<span class="number">0x50</span>,<span class="number">0x42</span>,<span class="number">0x27</span>,<span class="number">0x5A</span>,<span class="number">0x70</span>,<span class="number">0x23</span>,<span class="number">0x1C</span>,<span class="number">0x29</span>,<span class="number">0x33</span>,<span class="number">0x54</span>,<span class="number">0x19</span>,<span class="number">0x23</span>,<span class="number">0x6E</span>,<span class="number">0x34</span>,<span class="number">0x17</span>,<span class="number">0x45</span>,<span class="number">0x5C</span>,<span class="number">0x41</span>,<span class="number">0x79</span>,<span class="number">0x59</span>,<span class="number">0x26</span>,<span class="number">0x7F</span>,<span class="number">0x46</span>,<span class="number">0x23</span>,<span class="number">0x32</span>,<span class="number">0x47</span>]</span><br><span class="line">b=[<span class="number">0x25</span>,<span class="number">0x2A</span>,<span class="number">0x1C</span>,<span class="number">0x22</span>,<span class="number">0x32</span>,<span class="number">0x52</span>,<span class="number">0x5C</span>,<span class="number">0x73</span>,<span class="number">0x20</span>,<span class="number">0x70</span>,<span class="number">0x17</span>,<span class="number">0x5A</span>,<span class="number">0x46</span>,<span class="number">0x56</span>,<span class="number">0x7C</span>,<span class="number">0x2</span>,<span class="number">0x76</span>,<span class="number">0x76</span>,<span class="number">0x6</span>,<span class="number">0x3A</span>,<span class="number">0x32</span>,<span class="number">0x5B</span>,<span class="number">0x57</span>,<span class="number">0x2E</span>,<span class="number">0x30</span>,<span class="number">0x28</span>,<span class="number">0x58</span>,<span class="number">0x5B</span>,<span class="number">0x1A</span>,<span class="number">0x57</span>,<span class="number">0x75</span>,<span class="number">0x3</span>,<span class="number">0x70</span>,<span class="number">0x70</span>,<span class="number">0x1C</span>,<span class="number">0x29</span>,<span class="number">0x33</span>,<span class="number">0x54</span>,<span class="number">0x0C</span>,<span class="number">0x73</span>,<span class="number">0x75</span>,<span class="number">0x75</span>,<span class="number">0x0D</span>,<span class="number">0x49</span>,<span class="number">0x5</span>,<span class="number">0x9</span>,<span class="number">0x75</span>,<span class="number">0x1E</span>,<span class="number">0x74</span>,<span class="number">0x72</span>,<span class="number">0x1C</span>,<span class="number">0x74</span>,<span class="number">0x71</span>,<span class="number">0x1</span>,<span class="number">0x18</span>,<span class="number">0x73</span>,<span class="number">0x7B</span>,<span class="number">0x73</span>,<span class="number">0x0D</span>]</span><br><span class="line">key = [<span class="number">0x42</span>,<span class="number">0x42</span>,<span class="number">0x32</span>,<span class="number">0x46</span>,<span class="number">0x41</span>,<span class="number">0x33</span>,<span class="number">0x36</span>,<span class="number">0x41</span>,<span class="number">0x41</span>,<span class="number">0x41</span>,<span class="number">0x39</span>,<span class="number">0x35</span>,<span class="number">0x34</span>,<span class="number">0x31</span>,<span class="number">0x46</span>,<span class="number">0x30</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enc:</span><br><span class="line">	<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(i)):</span><br><span class="line">		<span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(i[j])^key[j%<span class="number">16</span>]),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">	<span class="built_in">print</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(a)):</span><br><span class="line">	<span class="built_in">print</span>(<span class="built_in">chr</span>(a[i]^key[i%<span class="number">16</span>]),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(a)):</span><br><span class="line">	<span class="built_in">print</span>(<span class="built_in">chr</span>(b[i]^key[i%<span class="number">16</span>]),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201112150926723.png" alt="image-20201112150926723"></p>
<p>然后，，，然后我就不会了……至于复制到哪里，我是拿着答案去找的。main函数调用了一个daemon_process:</p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201112152112264.png" alt="image-20201112152112264"></p>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201112152342036.png" alt="image-20201112152342036"></p>
<p>应该就是这样吧……</p>
<blockquote>
<p>Frank会长说：“一直纠结一个题就没意思了！”</p>
</blockquote>
<p>那就，，，放过吧~</p>
<blockquote>
<ol start="92">
<li><p>压缩包 <code>test2-master.zip</code> 中的文件是什么？（<strong>C</strong>）</p>
<p> A.恶意软件       B.加密程序       C.密钥文件       D.下载软件</p>
</li>
</ol>
</blockquote>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201111212304607.png" alt="image-20201111212304607"></p>
<blockquote>
<ol start="93">
<li><p>应用程序 <code>TrueCrypt-7.2.exe </code>是在什么时间下载到本机的？（<strong>C</strong>）</p>
<p><code> A. 2019-07-06 00:04:38     B. 2019-07-06 00:06:38     C. 2019-07-06 00:08:38     D. 2019-07-06 00:10:38</code></p>
</li>
</ol>
</blockquote>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201111212528321.png" alt="image-20201111212528321"></p>
<blockquote>
<ol start="94">
<li><p>文件 runit.txt 从哪个域名下载的？（<strong>D</strong>） </p>
<p> <code>A.https://pan.forensix.cn/lib/367d7f96-299f-4029-91a8-a31594b736cf/runit</code></p>
<p><code> B. https://pan.baidu.com/s/19uDE7H2RtEf7LLBgs5sDmg?errno=0&amp;errmsg=AuthLoginSucess&amp;&amp;bduss=&amp;ssnerror=0&amp;traceid=</code></p>
<p> <code>C.https://pan.forensix.cn/seafhttp/files/dec88b97-b2bc-414f-93a3-dcbbc15d615/runit</code></p>
<p><code> D.https://pan.forensix.cn/seafhttp/files/8fdf1982-e323-4efe-ae28-2bba21b5162c/runit</code></p>
</li>
</ol>
</blockquote>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201111212723050.png" alt="image-20201111212723050"></p>
<blockquote>
<ol start="95">
<li><p><code>BitLocker </code>密钥在什么位置？（<strong>B</strong>）</p>
<p><code>A. D:/DOWNLOAD       B. C:/USER       C. C:/       D. D:/</code></p>
</li>
<li><p><code>BitLocker.rar </code>生成的时间是？（<strong>B</strong>）</p>
<p> <code>A. 2019-07-13 17:51:47     B. 2019-07-13 17:52:19     C. 2019-07-13 17:53:24     D. 2019-07-13 16:31:06</code></p>
</li>
</ol>
</blockquote>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201111212942950.png" alt="image-20201111212942950"></p>
<blockquote>
<ol start="97">
<li><p>文件 <code>we.tar.gz</code> 传输完成的时间是？（<strong>C</strong>）</p>
<p><code> A. 2019-07-13 16:31:06     B. 2019-07-13 16;33:00     C. 2019-07-13 16:33:15     D. 2019-07-13 16:33:30</code></p>
</li>
</ol>
</blockquote>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201111213246657.png" alt="image-20201111213246657"></p>
<blockquote>
<ol start="98">
<li><p>嫌疑人在什么时间登陆网页微信？（<strong>A</strong>）</p>
<p> <code>A. 2019-07-13 16:34:55     B. 2019-07-13 16:40:13     C. 2019-07-13 16:45:45     D.2019-07-13 16:53:45</code></p>
</li>
</ol>
</blockquote>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201111213636179.png" alt="image-20201111213636179"></p>
<blockquote>
<ol start="99">
<li><p>嫌疑人于 <code>2019-07-13 17:22:23 </code>下载了什么文件？（<strong>B</strong>）</p>
<p> A.网站目录压缩文件     B.数据库备份文件     C.网站日志文件     D.数据库日志文件</p>
</li>
</ol>
</blockquote>
<p><img src="/2021/10/13/%E9%95%BF%E5%AE%89%E6%9D%AF2019%E4%BE%8B%E9%A2%98%E7%AC%94%E8%AE%B0/image-20201111215055052.png" alt="image-20201111215055052"></p>
<blockquote>
<ol start="100">
<li><p>硬盘 C 盘根目录中，文件<code>pagefile.sys.vhd</code>的作用是什么？（<strong>D</strong>）</p>
<p> A.<code> pagefile</code> 页面交换文件     B. 虚拟机启动文件     C. 系统配置文件     D. 虚拟磁盘</p>
</li>
</ol>
</blockquote>
<p>……在前面我们双击这个，然后解开<code>Bitlocker</code>，就挂载上了<code>D</code>    盘，所以应该是虚拟磁盘。</p>
<h1 id="疑难杂症"><a href="#疑难杂症" class="headerlink" title="疑难杂症"></a>疑难杂症</h1><p>8、请找出该服务器的网站访问端口是什么？（ ）</p>
<p>25、当我们想将网站重构好时，访问网站时，web 应用在其中承担什么样的工作？（ 需取证大师）</p>
<p>69、嫌疑人成功连接至 192.168.184.128 服务器的时间为：（ ）</p>
]]></content>
      <tags>
        <tag>电子数据取证</tag>
      </tags>
  </entry>
</search>
